# Anything
scalar _Any

union _Entity =
    Industry
  | Institution
  | Address
  | Group
  | User
  | SeekerNode
  | EmployerNode
  | InstitutionNode
  | Vacancy
  | Plan
  | PlanList
  | EducationItem
  | EducationNode
  | SkillItem
  | SkillNode
  | WorkItem
  | WorkNode
  | HobbyItem
  | HobbyNode
  | AwardItem
  | AwardNode
  | CertificationItem
  | CertificationNode
  | LanguageItem
  | LanguageNode
  | GalleryNode
  | LayoutNode
  | ResumeMetaDataNode
  | ProjectItem
  | ProjectNode
  | ReferenceItem
  | ReferenceNode
  | SocialItem
  | SocialNode
  | ObjectiveNode
  | ResumeNode
type _Service {
  sdl: String
}

# Create a new address for the customer.
type AccountAddressCreate {
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  # A user instance for which the address was created.
  user: User
  accountErrors: [AccountError!]!
  address: Address
}

# Delete an address of the logged-in user.
type AccountAddressDelete {
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  # A user instance for which the address was deleted.
  user: User
  accountErrors: [AccountError!]!
  address: Address
}

# Updates an address of the logged-in user.
type AccountAddressUpdate {
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  # A user object for which the address was edited.
  user: User
  accountErrors: [AccountError!]!
  address: Address
}

type AccountError {
  # Name of a field that caused the error. A value of `null` indicates that the
  # error isn't associated with a particular field.
  field: String
  # The error message.
  message: String
  # The error code.
  code: AccountErrorCode!
}

# An enumeration.
enum AccountErrorCode {
  ACTIVATE_OWN_ACCOUNT
  ACTIVATE_SUPERUSER_ACCOUNT
  DUPLICATED_INPUT_ITEM
  DEACTIVATE_OWN_ACCOUNT
  DEACTIVATE_SUPERUSER_ACCOUNT
  DELETE_NON_STAFF_USER
  DELETE_OWN_ACCOUNT
  DELETE_STAFF_ACCOUNT
  DELETE_SUPERUSER_ACCOUNT
  GRAPHQL_ERROR
  INACTIVE
  INVALID
  INVALID_PASSWORD
  LEFT_NOT_MANAGEABLE_PERMISSION
  INVALID_CREDENTIALS
  NOT_FOUND
  OUT_OF_SCOPE_USER
  OUT_OF_SCOPE_GROUP
  OUT_OF_SCOPE_PERMISSION
  PASSWORD_ENTIRELY_NUMERIC
  PASSWORD_TOO_COMMON
  PASSWORD_TOO_SHORT
  PASSWORD_TOO_SIMILAR
  REQUIRED
  UNIQUE
}

# Sets a default address for the authenticated user.
type AccountSetDefaultAddress {
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  # An updated user instance.
  user: User
  accountErrors: [AccountError!]!
}

# Represents user address data.
type Address implements Node {
  # The ID of the object.
  id: ID!
  firstName: String!
  lastName: String!
  companyName: String!
  streetAddress1: String!
  streetAddress2: String!
  city: String!
  cityArea: String!
  postalCode: String!
  # default country.
  country: CountryDisplay!
  countryArea: String!
  phone: String
  # Address is user's default address.
  isDefaultAddress: Boolean
}

type AddressCountableConnection {
  # Pagination data for this connection.
  pageInfo: PageInfo!
  edges: [AddressCountableEdge!]!
  # A total count of items in the collection.
  totalCount: Int
}

type AddressCountableEdge {
  # The item at the end of the edge.
  node: Address!
  # A cursor for use in pagination.
  cursor: String!
}

input AddressInput {
  # Given name.
  firstName: String
  # Family name.
  lastName: String
  # Company or organization.
  companyName: String
  # Address.
  streetAddress1: String
  # Address.
  streetAddress2: String
  # City.
  city: String
  # District.
  cityArea: String
  # Postal code.
  postalCode: String
  # Country.
  country: CountryCode
  # State or province.
  countryArea: String
  # Phone number.
  phone: String
}

type AddressValidationData {
  countryCode: String
  countryName: String
  addressFormat: String
  addressLatinFormat: String
  allowedFields: [String]
  requiredFields: [String]
  upperFields: [String]
  countryAreaType: String
  countryAreaChoices: [ChoiceValue]
  cityType: String
  cityChoices: [ChoiceValue]
  cityAreaType: String
  cityAreaChoices: [ChoiceValue]
  postalCodeType: String
  postalCodeMatchers: [String]
  postalCodeExamples: [String]
  postalCodePrefix: String
}

input ArchiveAccountInput {
  clientMutationId: String
  password: String!
}

# Archive account and revoke refresh tokens.
#
# User must be verified and confirm password.
type ArchiveAccountPayload {
  success: Boolean
  errors: ExpectedErrorType
  clientMutationId: String
}

# Represents user's Award State in a Resume.
type AwardItem implements Node {
  slug: String
  description: JSONString
  uuid: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean
  isActive: Boolean
  descriptionPlaintext: String
  # The ID of the object.
  id: ID!
  award: AwardNode
  organization: String!
  title: String!
  date: Date
}

# Represents user's Award State in a Resume.
type AwardNode implements Node {
  slug: String
  uuid: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean
  isActive: Boolean
  # The ID of the object.
  id: ID!
  heading: String
  resume: ResumeNode
  # Award list of the education section
  items: [AwardItem!]
}

# Represents user's Certificationa in a Resume other than system education.
type CertificationItem implements Node {
  slug: String
  description: JSONString
  uuid: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean
  isActive: Boolean
  descriptionPlaintext: String
  # The ID of the object.
  id: ID!
  certification: CertificationNode
  issuer: String!
  title: String!
  date: Date
}

# Represents user's Certificationa in a Resume other than system education.
type CertificationNode implements Node {
  slug: String
  description: JSONString
  uuid: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean
  isActive: Boolean
  descriptionPlaintext: String
  # The ID of the object.
  id: ID!
  heading: String
  resume: ResumeNode
  # Socials list of the education section
  items: [CertificationItem!]
}

# Create a new payment for given checkout.
type CheckoutPaymentCreate {
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  # Related Plan object.
  plan: Plan
  # A newly created payment.
  payment: Payment
  paymentErrors: [PaymentError!]!
}

type ChoiceValue {
  raw: String
  verbose: String
}

# Stores information about a single configuration field.
type ConfigurationItem {
  # Name of the field.
  name: String!
  # Current value of the field.
  value: String
  # Type of the field.
  type: ConfigurationTypeFieldEnum
  # Help text for the field.
  helpText: String
  # Label for the field.
  label: String
}

input ConfigurationItemInput {
  # Name of the field to update.
  name: String!
  # Value of the given field to update.
  value: String
}

# An enumeration.
enum ConfigurationTypeFieldEnum {
  STRING
  BOOLEAN
  SECRET
  PASSWORD
  SECRETMULTILINE
}

# An enumeration.
enum CountryCode {
  AF
  AX
  AL
  DZ
  AS
  AD
  AO
  AI
  AQ
  AG
  AR
  AM
  AW
  AU
  AT
  AZ
  BS
  BH
  BD
  BB
  BY
  BE
  BZ
  BJ
  BM
  BT
  BO
  BQ
  BA
  BW
  BV
  BR
  IO
  BN
  BG
  BF
  BI
  CV
  KH
  CM
  CA
  KY
  CF
  TD
  CL
  CN
  CX
  CC
  CO
  KM
  CG
  CD
  CK
  CR
  CI
  HR
  CU
  CW
  CY
  CZ
  DK
  DJ
  DM
  DO
  EC
  EG
  SV
  GQ
  ER
  EE
  SZ
  ET
  FK
  FO
  FJ
  FI
  FR
  GF
  PF
  TF
  GA
  GM
  GE
  DE
  GH
  GI
  GR
  GL
  GD
  GP
  GU
  GT
  GG
  GN
  GW
  GY
  HT
  HM
  VA
  HN
  HK
  HU
  IS
  IN
  ID
  IR
  IQ
  IE
  IM
  IL
  IT
  JM
  JP
  JE
  JO
  KZ
  KE
  KI
  KW
  KG
  LA
  LV
  LB
  LS
  LR
  LY
  LI
  LT
  LU
  MO
  MG
  MW
  MY
  MV
  ML
  MT
  MH
  MQ
  MR
  MU
  YT
  MX
  FM
  MD
  MC
  MN
  ME
  MS
  MA
  MZ
  MM
  NA
  NR
  NP
  NL
  NC
  NZ
  NI
  NE
  NG
  NU
  NF
  KP
  MK
  MP
  NO
  OM
  PK
  PW
  PS
  PA
  PG
  PY
  PE
  PH
  PN
  PL
  PT
  PR
  QA
  RE
  RO
  RU
  RW
  BL
  SH
  KN
  LC
  MF
  PM
  VC
  WS
  SM
  ST
  SA
  SN
  RS
  SC
  SL
  SG
  SX
  SK
  SI
  SB
  SO
  ZA
  GS
  KR
  SS
  ES
  LK
  SD
  SR
  SJ
  SE
  CH
  SY
  TW
  TJ
  TZ
  TH
  TL
  TG
  TK
  TO
  TT
  TN
  TR
  TM
  TC
  TV
  UG
  UA
  AE
  GB
  UM
  US
  UY
  UZ
  VU
  VE
  VN
  VG
  VI
  WF
  EH
  YE
  ZM
  ZW
}

type CountryDisplay {
  # Country code.
  code: String!
  # Country name.
  country: String!
}

input CreateAwardInput {
  resumePk: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  heading: String
  resume: ID
  items: [ID]
  itemsAdd: [CreateAwardInputAddAwardItems]
}

input CreateAwardInputAddAwardItems {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  organization: String
  title: String
  date: Date
}

input CreateAwardItemInput {
  awardPk: ID
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  award: ID
  organization: String
  title: String
  date: Date
}

type CreateAwardItemMutation {
  awardItem: AwardItem
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type CreateAwardMutation {
  award: AwardNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

input CreateCertificationInput {
  resumePk: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  resume: ID
  items: [ID]
  itemsAdd: [CreateCertificationInputAddCertificationItems]
}

input CreateCertificationInputAddCertificationItems {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  issuer: String
  title: String
  date: Date
}

input CreateCertificationItemInput {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  certification: ID
  issuer: String
  title: String
  date: Date
}

type CreateCertificationItemMutation {
  certificationItem: CertificationItem
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type CreateCertificationMutation {
  certification: CertificationNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

input CreateEducationInput {
  resumePk: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  resume: ID
  items: [ID]
  itemsAdd: [CreateEducationInputAddEducationItems]
  itemsRemove: [ID]
}

input CreateEducationInputAddEducationItems {
  level: EducationItemLevel
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  institution: String
  fieldOfStudy: String
  gpa: String
  schoolStart: Date!
  schoolEnd: Date!
}

input CreateEducationItemInput {
  level: EducationItemLevel
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  education: ID
  institution: String
  fieldOfStudy: String
  gpa: String
  schoolStart: Date!
  schoolEnd: Date!
}

type CreateEducationItemMutation {
  educationItem: EducationItem
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type CreateEducationMutation {
  education: EducationNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

input CreateEmployerInput {
  workForce: EmployerWorkForce
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  name: String
  website: String
  country: String
  location: String
  mobile: String
  regNo: Int
  lookingFor: String
  industries: [ID]
}

type CreateEmployerMutation {
  employer: EmployerNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  employerErrors: [AccountError!]!
}

input CreateHobbyInput {
  resumePk: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  resume: ID
  items: [ID]
  itemsAdd: [CreateHobbyInputAddHobbyItems]
  itemsRemove: [ID]
}

input CreateHobbyInputAddHobbyItems {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  name: String
}

input CreateHobbyItemInput {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  hobby: ID
  name: String
}

type CreateHobbyItemMutation {
  hobbyItem: HobbyItem
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type CreateHobbyMutation {
  hobby: HobbyNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type CreateInstitution {
  institution: Institution
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  vacancyErrors: [VacancyError!]!
}

input CreateInstitutionInput {
  studentCount: InstitutionStudentCount
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  name: String
  website: String
  country: String
  location: String
  mobile: String
  regNo: String
}

type CreateInstitutionMutation {
  institution: InstitutionNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  institutionErrors: [AccountError!]!
}

input CreateJobInput {
  jobType: JobJobType
  minQualification: JobMinQualification
  yearsOfExp: JobYearsOfExp
  payRate: JobPayRate
  description: JSONString
  descriptionPlaintext: String
  seoTitle: String
  seoDescription: String
  title: String!
  industry: ID!
  currency: String
  salary: Decimal
  location: String
  jobTags: String
  closingDate: Date
  applicationEmail: String!
  positions: Int
  applicationSet: [ID]
  bookmarked: [ID]
}

input CreateLanguageInput {
  resumePk: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  resume: ID
  items: [ID]
  itemsAdd: [CreateLanguageInputAddLanguageItems]
  itemsRemove: [ID]
}

input CreateLanguageInputAddLanguageItems {
  level: LanguageItemLevel
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  title: String
}

input CreateLanguageItemInput {
  level: LanguageItemLevel
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  language: ID
  title: String
}

type CreateLanguageItemMutation {
  languageItem: LanguageItem
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type CreateLanguageMutation {
  language: LanguageNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

input CreateLayoutInput {
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  metadata: ID
  name: String!
  collection: [[String]]!
}

type CreateLayoutMutation {
  layout: LayoutNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

input CreateProjectInput {
  resumePk: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  resume: ID
  items: [ID]
  itemsAdd: [CreateProjectInputAddProjectItems]
  itemsRemove: [ID]
}

input CreateProjectInputAddProjectItems {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  title: String!
  startDate: Date
  endDate: Date
  link: String
}

input CreateProjectItemInput {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  project: ID
  title: String!
  startDate: Date
  endDate: Date
  link: String
}

type CreateProjectItemMutation {
  projectItem: ProjectItem
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type CreateProjectMutation {
  project: ProjectNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

input CreateReferenceInput {
  resumePk: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  resume: ID
  items: [ID]
  itemsAdd: [CreateReferenceInputAddReferenceItems]
  itemsRemove: [ID]
}

input CreateReferenceInputAddReferenceItems {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  email: String!
  position: String
  fullName: String!
  mobile: String
  summary: String
}

input CreateReferenceItemInput {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  reference: ID
  email: String!
  position: String
  fullName: String!
  mobile: String
  summary: String
}

type CreateReferenceItemMutation {
  referenceItem: ReferenceItem
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type CreateReferenceMutation {
  reference: ReferenceNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

input CreateResumeInput {
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  privateMetadata: JSONString
  metadata: JSONString
  seoTitle: String
  seoDescription: String
  public: Boolean
  name: String!
  owner: ID
  objective: CreateResumeInputCreateObjective
  education: PatchResumeInputCreateEducation
  skill: PatchResumeInputCreateSkill
  hobby: PatchResumeInputCreateHobby
  work: PatchResumeInputCreateWork
  award: PatchResumeInputCreateAward
  certification: PatchResumeInputCreateCertification
  language: PatchResumeInputCreateLanguage
  resumemetadata: CreateResumeInputCreateResumemetadata
  project: PatchResumeInputCreateProject
  reference: PatchResumeInputCreateReference
  social: PatchResumeInputCreateSocial
}

input CreateResumeInputCreateObjective {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
}

input CreateResumeInputCreateResumemetadata {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  backgroundColor: String!
  primaryColor: String!
  textColor: String!
  font: String!
  fontSize: String!
  language: String
  layouts: [ID]
}

input CreateResumeMetaDataInput {
  resumePk: ID!
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  resume: ID
  backgroundColor: String!
  primaryColor: String!
  textColor: String!
  font: String!
  fontSize: String!
  language: String
  layouts: [ID]
}

type CreateResumeMetaDataMutation {
  resumeMetaData: ResumeMetaDataNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type CreateResumeMutation {
  resume: ResumeNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

input CreateSeekerInput {
  gender: SeekerGender
  status: SeekerStatus
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  title: String
  idNumber: Int
  dateOfBirth: Date
  location: String
  institution: String
  course: String
  address: ID
  industries: [ID]!
  mobile: String
}

# Create a new Seeker profile for a user.
type CreateSeekerMutation {
  seeker: SeekerNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  seekerErrors: [AccountError!]!
}

input CreateSelectableInstitutionInput {
  chatroom: String!
  text: String!
  description: JSONString
  descriptionPlaintext: String
  privateMetadata: JSONString
  metadata: JSONString
  seoTitle: String
  seoDescription: String
  name: String!
}

input CreateSkillInput {
  resumePk: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  resume: ID
  items: [ID]
  itemsAdd: [CreateSkillInputAddSkillItems]
  itemsRemove: [ID]
}

input CreateSkillInputAddSkillItems {
  proficiency: SkillItemProficiency
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  name: String
}

input CreateSkillItemInput {
  proficiency: SkillItemProficiency
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  skill: ID
  name: String
}

type CreateSkillItemMutation {
  skillItem: SkillItem
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type CreateSkillMutation {
  skill: SkillNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

input CreateSocialInput {
  resumePk: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  resume: ID
  owner: ID
  items: [ID]
  itemsAdd: [CreateSocialInputAddSocialItems]
  itemsRemove: [ID]
}

input CreateSocialInputAddSocialItems {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  link: String
  network: String
  username: String
}

input CreateSocialItemInput {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  social: ID
  link: String
  network: String
  username: String
}

type CreateSocialItemMutation {
  socialItem: SocialItem
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type CreateSocialMutation {
  social: SocialNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type CreateVacancyMutation {
  job: Vacancy
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

input CreateWorkInput {
  resumePk: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  resume: ID
  items: [ID]
  itemsAdd: [CreateWorkInputAddWorkItems]
  itemsRemove: [ID]
}

input CreateWorkInputAddWorkItems {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  company: String
  position: String
  workStart: Date
  workEnd: Date
  achievements: String
  website: String
}

input CreateWorkItemInput {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  work: ID
  company: String
  position: String
  workStart: Date
  workEnd: Date
  achievements: String
  website: String
}

type CreateWorkItemMutation {
  workItem: WorkItem
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type CreateWorkMutation {
  work: WorkNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type CreditCard {
  # Card brand.
  brand: String!
  # First 4 digits of the card number.
  firstDigits: String
  # Last 4 digits of the card number.
  lastDigits: String!
  # Two-digit number representing the card’s expiration month.
  expMonth: Int
  # Four-digit number representing the card’s expiration year.
  expYear: Int
}

# The `Date` scalar type
 represents a Date
# value as specified by
# [iso8601](https://en.wikipedia.org/wiki/ISO_8601).
scalar Date

# The `DateTime` scalar type
 represents a DateTime
# value as specified by
# [iso8601](https://en.wikipedia.org/wiki/ISO_8601).
scalar DateTime

# The `Decimal` scalar type
 represents a python Decimal.
scalar Decimal

input DeleteAccountInput {
  clientMutationId: String
  password: String!
}

# Delete account permanently or make `user.is_active=False`.
#
# The behavior is defined on settings.
# Anyway user refresh tokens are revoked.
#
# User must be verified and confirm password.
type DeleteAccountPayload {
  success: Boolean
  errors: ExpectedErrorType
  clientMutationId: String
}

type DeleteAwardItemMutation {
  found: Boolean
  deletedInputId: ID
  deletedId: ID
  deletedRawId: ID
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type DeleteAwardMutation {
  found: Boolean
  deletedInputId: ID
  deletedId: ID
  deletedRawId: ID
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type DeleteCertificationItemMutation {
  found: Boolean
  deletedInputId: ID
  deletedId: ID
  deletedRawId: ID
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type DeleteCertificationMutation {
  found: Boolean
  deletedInputId: ID
  deletedId: ID
  deletedRawId: ID
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type DeleteEducationItemMutation {
  found: Boolean
  deletedInputId: ID
  deletedId: ID
  deletedRawId: ID
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type DeleteEducationMutation {
  found: Boolean
  deletedInputId: ID
  deletedId: ID
  deletedRawId: ID
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type DeleteEmployerMutation {
  found: Boolean
  deletedInputId: ID
  deletedId: ID
  deletedRawId: ID
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  employerErrors: [AccountError!]!
}

type DeleteHobbyItemMutation {
  found: Boolean
  deletedInputId: ID
  deletedId: ID
  deletedRawId: ID
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type DeleteHobbyMutation {
  found: Boolean
  deletedInputId: ID
  deletedId: ID
  deletedRawId: ID
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type DeleteInstitution {
  found: Boolean
  deletedInputId: ID
  deletedId: ID
  deletedRawId: ID
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  vacancyErrors: [VacancyError!]!
}

type DeleteInstitutionMutation {
  found: Boolean
  deletedInputId: ID
  deletedId: ID
  deletedRawId: ID
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  institutionErrors: [AccountError!]!
}

type DeleteLanguageItemMutation {
  found: Boolean
  deletedInputId: ID
  deletedId: ID
  deletedRawId: ID
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type DeleteLanguageMutation {
  found: Boolean
  deletedInputId: ID
  deletedId: ID
  deletedRawId: ID
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type DeleteLayoutMutation {
  found: Boolean
  deletedInputId: ID
  deletedId: ID
  deletedRawId: ID
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type DeleteProjectItemMutation {
  found: Boolean
  deletedInputId: ID
  deletedId: ID
  deletedRawId: ID
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type DeleteProjectMutation {
  found: Boolean
  deletedInputId: ID
  deletedId: ID
  deletedRawId: ID
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type DeleteReferenceItemMutation {
  found: Boolean
  deletedInputId: ID
  deletedId: ID
  deletedRawId: ID
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type DeleteReferenceMutation {
  found: Boolean
  deletedInputId: ID
  deletedId: ID
  deletedRawId: ID
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type DeleteResumeMetaDataMutation {
  found: Boolean
  deletedInputId: ID
  deletedId: ID
  deletedRawId: ID
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type DeleteResumeMutation {
  found: Boolean
  deletedInputId: ID
  deletedId: ID
  deletedRawId: ID
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type DeleteSeekerMutation {
  found: Boolean
  deletedInputId: ID
  deletedId: ID
  deletedRawId: ID
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  seekerErrors: [AccountError!]!
}

type DeleteSkillItemMutation {
  found: Boolean
  deletedInputId: ID
  deletedId: ID
  deletedRawId: ID
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type DeleteSkillMutation {
  found: Boolean
  deletedInputId: ID
  deletedId: ID
  deletedRawId: ID
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type DeleteSocialItemMutation {
  found: Boolean
  deletedInputId: ID
  deletedId: ID
  deletedRawId: ID
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type DeleteSocialMutation {
  found: Boolean
  deletedInputId: ID
  deletedId: ID
  deletedRawId: ID
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type DeleteVacancyMutation {
  found: Boolean
  deletedInputId: ID
  deletedId: ID
  deletedRawId: ID
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  vacancyErrors: [VacancyError!]!
}

type DeleteWorkItemMutation {
  found: Boolean
  deletedInputId: ID
  deletedId: ID
  deletedRawId: ID
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type DeleteWorkMutation {
  found: Boolean
  deletedInputId: ID
  deletedId: ID
  deletedRawId: ID
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type DuplicateResumeMutation {
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  resume: ResumeNode
}

# Represents user's Education State in a Resume.
type EducationItem implements Node {
  slug: String
  description: JSONString
  uuid: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean
  isActive: Boolean
  descriptionPlaintext: String
  # The ID of the object.
  id: ID!
  education: EducationNode
  institution: String!
  fieldOfStudy: String!
  gpa: String!
  level: EducationItemLevel!
  schoolStart: Date!
  schoolEnd: Date!
}

# An enumeration.
enum EducationItemLevel {
  # Doctorate
  DOCTORATE
  # Masters
  MASTERS
  # Degree
  DEGREE
  # Diploma
  DIPLOMA
  # Certificate
  CERTIFICATE
  # High School
  HIGH_SCHOOL
}

# Represents user's Education State in a Resume.
type EducationNode implements Node {
  slug: String
  description: JSONString
  uuid: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean
  isActive: Boolean
  descriptionPlaintext: String
  # The ID of the object.
  id: ID!
  heading: String
  resume: ResumeNode
  # Socials list of the education section
  items: [EducationItem!]
}

input EmployerFilterInput {
  search: String
  industries: [ID]
}

# Represents user's Extended profie as Employer.
type EmployerNode implements Node {
  slug: String
  description: JSONString
  uuid: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean
  isActive: Boolean
  descriptionPlaintext: String
  # The ID of the object.
  id: ID!
  user: User!
  name: String
  website: String
  country: String
  location: String
  mobile: String
  workForce: EmployerWorkForce!
  regNo: Int!
  lookingFor: String!
  # a list of all industries an employer is involved in
  industries: [Industry!]
  logo(
    # Size of the avatar.
    size: Int
  ): Image
  # percentage of the completed baseAccount progress.
  progress: Int
}

type EmployerNodeCountableConnection {
  # Pagination data for this connection.
  pageInfo: PageInfo!
  edges: [EmployerNodeCountableEdge!]!
  # A total count of items in the collection.
  totalCount: Int
}

type EmployerNodeCountableEdge {
  # The item at the end of the edge.
  node: EmployerNode!
  # A cursor for use in pagination.
  cursor: String!
}

enum EmployerSortField {
  # Sort users by first name.
  FIRST_NAME
  # Sort users by last name.
  LAST_NAME
  # Sort users by email.
  EMAIL
}

input EmployerSortingInput {
  # Specifies the direction in which to sort products.
  direction: OrderDirection!
  # Sort employers by the selected field.
  field: EmployerSortField!
}

# An enumeration.
enum EmployerWorkForce {
  # 1-5
  A_1_5
  # 5-10
  A_6_10
  # 10-50
  A_11_50
  # 52-100
  A_51_100
  # 101-500
  A_101_500
  # 501-1000
  A_501_1000
  # 1001-5000
  A_1001_5000
  # 5001-10000
  A_5001_10000
  # >10000
  _10000
}

# Represents an error in the input of a mutation.
type Error {
  # Name of a field that caused the error. A value of `null` indicates that the
  # error isn't associated with a particular field.
  field: String
  # The error message.
  message: String
}

#
#     Errors messages and codes mapped to
#     fields or non fields errors.
#     Example:
#     {
#         field_name: [
#             {
#                 "message": "error message",
#                 "code": "error_code"
#             }

#         ],
#         other_field: [
#             {
#                 "message": "error message",
#                 "code": "error_code"
#             }

#         ],
#         nonFieldErrors: [
#             {
#                 "message": "error message",
#                 "code": "error_code"
#             }

#         ]
#     }

#
scalar ExpectedErrorType

# Represents user's photo gallery to use in a Resume.
type GalleryNode implements Node {
  slug: String
  description: JSONString
  uuid: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean
  isActive: Boolean
  descriptionPlaintext: String
  # The ID of the object.
  id: ID!
  user: User!
  photo: String
  photoAlt: String!
}

# The `GenericScalar` scalar type
 represents a generic
# GraphQL scalar value
 that could be:
# String, Boolean, Int, Float, List or Object.
scalar GenericScalar

# Represents permission group data.
type Group implements Node {
  # The ID of the object.
  id: ID!
  name: String!
  # List of group permissions
  permissions: [Permission]
  # List of group users
  users: [UserNode]
  # True, if the currently authenticated user has rights to manage a group.
  userCanManage: Boolean!
}

type GroupCountableConnection {
  # Pagination data for this connection.
  pageInfo: PageInfo!
  edges: [GroupCountableEdge!]!
  # A total count of items in the collection.
  totalCount: Int
}

type GroupCountableEdge {
  # The item at the end of the edge.
  node: Group!
  # A cursor for use in pagination.
  cursor: String!
}

# Represents user's Hobby State in a Resume.
type HobbyItem implements Node {
  slug: String
  uuid: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean
  isActive: Boolean
  # The ID of the object.
  id: ID!
  hobby: HobbyNode
  name: String!
}

# Represents user's Hobby State in a Resume.
type HobbyNode implements Node {
  slug: String
  description: JSONString
  uuid: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean
  isActive: Boolean
  descriptionPlaintext: String
  # The ID of the object.
  id: ID!
  heading: String
  resume: ResumeNode
  # Socials list of the education section
  items: [HobbyItem!]
}

# Represents an image.
type Image {
  # The URL of the image.
  url: String!
  # Alt text for an image.
  alt: String
}

# Represents a single industry of vacancies. Categories allow to organize
# vacancies in a tree-hierarchies which can be used for navigation in the storefront.
type Industry implements Node & ObjectWithMetadata {
  # The ID of the object.
  id: ID!
  slug: String
  description: JSONString
  seoTitle: String
  seoDescription: String
  name: String!
  parent: Industry
  icon: String
  level: Int!
  # List of private metadata items.Requires proper staff permissions to access.
  privateMetadata: [MetadataItem]!
  # List of public metadata items. Can be accessed without permissions.
  metadata: [MetadataItem]!
  # Description of the industry (JSON).
  descriptionJson: JSONString
    @deprecated(
      reason: "Will be removed and use the `description` field instead."
    )
  # List of ancestors of the industry.
  ancestors(
    # Return the elements in the list that come before the specified cursor.
    before: String
    # Return the elements in the list that come after the specified cursor.
    after: String
    # Return the first n elements from the list.
    first: Int
    # Return the last n elements from the list.
    last: Int
  ): IndustryCountableConnection
  # List of vacancies in the industry.
  vacancies(
    # Return the elements in the list that come before the specified cursor.
    before: String
    # Return the elements in the list that come after the specified cursor.
    after: String
    # Return the first n elements from the list.
    first: Int
    # Return the last n elements from the list.
    last: Int
  ): VacancyCountableConnection
  # The storefront's URL for the industry.
  url: String
    @deprecated(reason: "This field will be removed after 2021-08-31.")
  # List of children of the industry.
  children(
    # Return the elements in the list that come before the specified cursor.
    before: String
    # Return the elements in the list that come after the specified cursor.
    after: String
    # Return the first n elements from the list.
    first: Int
    # Return the last n elements from the list.
    last: Int
  ): IndustryCountableConnection
  backgroundImage(
    # Size of the image.
    size: Int
  ): Image
}

# Deletes industries.
type IndustryBulkDelete {
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  # Returns how many objects were affected.
  count: Int!
  vacancyErrors: [VacancyError!]!
}

type IndustryCountableConnection {
  # Pagination data for this connection.
  pageInfo: PageInfo!
  edges: [IndustryCountableEdge!]!
  # A total count of items in the collection.
  totalCount: Int
}

type IndustryCountableEdge {
  # The item at the end of the edge.
  node: Industry!
  # A cursor for use in pagination.
  cursor: String!
}

# Creates a new industry.
type IndustryCreate {
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  vacancyErrors: [VacancyError!]!
  industry: Industry
}

# Deletes a industry.
type IndustryDelete {
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  vacancyErrors: [VacancyError!]!
  industry: Industry
}

input IndustryFilterInput {
  search: String
  ids: [ID]
}

input IndustryInput {
  # Industry description (JSON).
  description: JSONString
  # Industry name.
  name: String
  # Industry slug.
  slug: String
  # Search engine optimization fields.
  seo: SeoInput
  # Background image file.
  backgroundImage: Upload
  # Alt text for an image.
  backgroundImageAlt: String
}

enum IndustrySortField {
  # Sort categories by name.
  NAME
  # Sort categories by vacancy count.
  VACANCY_COUNT
  # Sort categories by subcategory count.
  SUBCATEGORY_COUNT
}

input IndustrySortingInput {
  # Specifies the direction in which to sort products.
  direction: OrderDirection!
  # Sort industries by the selected field.
  field: IndustrySortField!
}

# Updates a industry.
type IndustryUpdate {
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  vacancyErrors: [VacancyError!]!
  industry: Industry
}

# Represents a single institution.
type Institution implements Node & ObjectWithMetadata {
  slug: String
  description: JSONString
  seoTitle: String
  seoDescription: String
  name: String!
  # The ID of the object.
  id: ID!
  # List of private metadata items.Requires proper staff permissions to access.
  privateMetadata: [MetadataItem]!
  # List of public metadata items. Can be accessed without permissions.
  metadata: [MetadataItem]!
  backgroundImage(
    # Size of the image.
    size: Int
  ): Image
}

input InstitutionFilterInput {
  search: String
}

# Represents user's Extended profie as an Institution.
type InstitutionNode implements Node {
  slug: String
  description: JSONString
  uuid: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean
  isActive: Boolean
  descriptionPlaintext: String
  user: User!
  name: String
  website: String
  country: String
  location: String
  mobile: String
  # The ID of the object.
  id: ID!
  regNo: String!
  studentCount: InstitutionStudentCount!
  logo(
    # Size of the avatar.
    size: Int
  ): Image
  # percentage of the completed baseAccount progress.
  progress: Int
}

type InstitutionNodeCountableConnection {
  # Pagination data for this connection.
  pageInfo: PageInfo!
  edges: [InstitutionNodeCountableEdge!]!
  # A total count of items in the collection.
  totalCount: Int
}

type InstitutionNodeCountableEdge {
  # The item at the end of the edge.
  node: InstitutionNode!
  # A cursor for use in pagination.
  cursor: String!
}

enum InstitutionSortField {
  # Sort users by first name.
  FIRST_NAME
  # Sort users by last name.
  LAST_NAME
  # Sort users by email.
  EMAIL
}

input InstitutionSortingInput {
  # Specifies the direction in which to sort products.
  direction: OrderDirection!
  # Sort institutions by the selected field.
  field: InstitutionSortField!
}

# An enumeration.
enum InstitutionStudentCount {
  # 1-5
  A_1_5
  # 5-10
  A_6_10
  # 10-50
  A_11_50
  # 52-100
  A_51_100
  # 101-500
  A_101_500
  # 501-1000
  A_501_1000
  # 1001-5000
  A_1001_5000
  # 5001-10000
  A_5001_10000
  # >10000
  _10000
}

# An enumeration.
enum JobJobType {
  # Full Time
  FULL_TIME
  # Part Time
  PART_TIME
  # Volunteering
  VOLUNTEERING
  # Internship
  INTERNSHIP
  # Gig
  GIG
}

# An enumeration.
enum JobMinQualification {
  # None
  NONE
  # Primary
  PRIMARY
  # Secondary
  SECONDARY
  # Certificate
  CERTIFICATE
  # Diploma
  DIPLOMA
  # BSc
  BSC
  # MSc
  MSC
  # PhD
  PHD
}

# An enumeration.
enum JobPayRate {
  # Hour
  HOUR
  # Day
  DAY
  # Week
  WEEK
  # Month
  MONTH
  # Job Completion
  JOBCOMPLETION
}

# An enumeration.
enum JobYearsOfExp {
  # Entry Level
  ENTRY
  # 1-2 years
  ONE_TWO
  # 3-5 years
  THREE_FIVE
  # 6-10 years
  SIX_TEN
  # Above 10 years
  ABOVE_TEN
}

# Allows use of a JSON String for input / output from the GraphQL schema.
#
# Use of this type is *not recommended* as you lose the benefits of having a defined, static
# schema (one of the key benefits of GraphQL).
scalar JSONString

# Represents user's Language collection in a Resume.
type LanguageItem implements Node {
  slug: String
  description: JSONString
  uuid: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean
  isActive: Boolean
  descriptionPlaintext: String
  # The ID of the object.
  id: ID!
  language: LanguageNode
  level: LanguageItemLevel!
  title: String!
}

# An enumeration.
enum LanguageItemLevel {
  # Native Tongue
  NATIVE_TONGUE
  # Very Fluent
  VERY_FLUENT
  # Degree
  LEARNING_ON_DUOLINGO
  # Learning on Duolingo
  DIPLOMA
  # Beginner
  BEGINNER
}

# Represents user's Language collection in a Resume.
type LanguageNode implements Node {
  slug: String
  description: JSONString
  uuid: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean
  isActive: Boolean
  descriptionPlaintext: String
  # The ID of the object.
  id: ID!
  heading: String
  resume: ResumeNode
  # Socials list of the education section
  items: [LanguageItem!]
}

# Represents user's Resume Layout.
type LayoutNode implements Node {
  slug: String
  description: JSONString
  uuid: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean
  isActive: Boolean
  descriptionPlaintext: String
  # The ID of the object.
  id: ID!
  metadata: ResumeMetaDataNode
  name: String!
  collection: [[String!]]!
}

type LayoutNodeCountableConnection {
  # Pagination data for this connection.
  pageInfo: PageInfo!
  edges: [LayoutNodeCountableEdge!]!
  # A total count of items in the collection.
  totalCount: Int
}

type LayoutNodeCountableEdge {
  # The item at the end of the edge.
  node: LayoutNode!
  # A cursor for use in pagination.
  cursor: String!
}

type MetadataItem {
  # Key of a metadata item.
  key: String!
  # Value of a metadata item.
  value: String!
}

# Represents amount of money in specific currency.
type Money {
  # Currency code.
  currency: String!
  # Amount of money.
  amount: Float!
}

type MpesaOnlineCheckout {
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  onlineCheckout: OnlineCheckout
}

type Mutation {
  makePayment(
    # Data required to create a new payment.
    input: OnlineCheckoutInput!
    # Plan ID.
    planId: ID!
  ): MpesaOnlineCheckout
  # Create a new payment for given checkout.
  checkoutPayment(
    # Data required to create a new payment.
    input: PaymentInput!
    # Plan ID.
    planId: ID!
  ): CheckoutPaymentCreate
  # Captures the authorized payment amount.
  paymentCapture(
    # Transaction amount.
    amount: PositiveDecimal
    # Payment ID.
    paymentId: ID!
  ): PaymentCapture
  # Refunds the captured payment amount.
  paymentRefund(
    # Transaction amount.
    amount: PositiveDecimal
    # Payment ID.
    paymentId: ID!
  ): PaymentRefund
  # Voids the authorized payment.
  paymentVoid(
    # Payment ID.
    paymentId: ID!
  ): PaymentVoid
  # Initializes payment process when it is required by gateway.
  paymentInitialize(
    # A gateway name used to initialize the payment.
    gateway: String!
    # Client-side generated data required to initialize the payment.
    paymentData: JSONString
  ): PaymentInitialize
  # Update plugin configuration.
  pluginUpdate(
    # ID of plugin to update.
    id: ID!
    # Fields required to update a plugin configuration.
    input: PluginUpdateInput!
  ): PluginUpdate
  layoutCreate(input: CreateLayoutInput!): CreateLayoutMutation
  layoutUpdate(id: ID!, input: UpdateLayoutInput!): UpdateLayoutMutation
  layoutPatch(id: ID!, input: PatchLayoutInput!): PatchLayoutMutation
  layoutDelete(id: ID!): DeleteLayoutMutation
  resumeCreate(input: CreateResumeInput!): CreateResumeMutation
  resumeUpdate(id: ID!, input: UpdateResumeInput!): UpdateResumeMutation
  resumePatch(id: ID!, input: PatchResumeInput!): PatchResumeMutation
  resumeDelete(id: ID!): DeleteResumeMutation
  duplicateResume(
    # Resume ID.
    resumeId: ID!
  ): DuplicateResumeMutation
  resumeMetadataCreate(
    input: CreateResumeMetaDataInput!
  ): CreateResumeMetaDataMutation
  resumeMetadataUpdate(
    id: ID!
    input: UpdateResumeMetaDataInput!
  ): UpdateResumeMetaDataMutation
  resumeMetadataPatch(
    id: ID!
    input: PatchResumeMetaDataInput!
  ): PatchResumeMetaDataMutation
  resumeMetadataDelete(id: ID!): DeleteResumeMetaDataMutation
  awardCreate(input: CreateAwardInput!): CreateAwardMutation
  awardUpdate(id: ID!, input: UpdateAwardInput!): UpdateAwardMutation
  awardPatch(id: ID!, input: PatchAwardInput!): PatchAwardMutation
  awardDelete(id: ID!): DeleteAwardMutation
  educationCreate(input: CreateEducationInput!): CreateEducationMutation
  educationUpdate(
    id: ID!
    input: UpdateEducationInput!
  ): UpdateEducationMutation
  educationPatch(id: ID!, input: PatchEducationInput!): PatchEducationMutation
  educationDelete(id: ID!): DeleteEducationMutation
  skillCreate(input: CreateSkillInput!): CreateSkillMutation
  skillUpdate(id: ID!, input: UpdateSkillInput!): UpdateSkillMutation
  skillPatch(id: ID!, input: PatchSkillInput!): PatchSkillMutation
  skillDelete(id: ID!): DeleteSkillMutation
  hobbyCreate(input: CreateHobbyInput!): CreateHobbyMutation
  hobbyUpdate(id: ID!, input: UpdateHobbyInput!): UpdateHobbyMutation
  hobbyPatch(id: ID!, input: PatchHobbyInput!): PatchHobbyMutation
  hobbyDelete(id: ID!): DeleteHobbyMutation
  workCreate(input: CreateWorkInput!): CreateWorkMutation
  workUpdate(id: ID!, input: UpdateWorkInput!): UpdateWorkMutation
  workPatch(id: ID!, input: PatchWorkInput!): PatchWorkMutation
  workDelete(id: ID!): DeleteWorkMutation
  certificationCreate(
    input: CreateCertificationInput!
  ): CreateCertificationMutation
  certificationUpdate(
    id: ID!
    input: UpdateCertificationInput!
  ): UpdateCertificationMutation
  certificationPatch(
    id: ID!
    input: PatchCertificationInput!
  ): PatchCertificationMutation
  certificationDelete(id: ID!): DeleteCertificationMutation
  languageCreate(input: CreateLanguageInput!): CreateLanguageMutation
  languageUpdate(id: ID!, input: UpdateLanguageInput!): UpdateLanguageMutation
  languagePatch(id: ID!, input: PatchLanguageInput!): PatchLanguageMutation
  languageDelete(id: ID!): DeleteLanguageMutation
  projectCreate(input: CreateProjectInput!): CreateProjectMutation
  projectUpdate(id: ID!, input: UpdateProjectInput!): UpdateProjectMutation
  projectPatch(id: ID!, input: PatchProjectInput!): PatchProjectMutation
  projectDelete(id: ID!): DeleteProjectMutation
  referenceCreate(input: CreateReferenceInput!): CreateReferenceMutation
  referenceUpdate(
    id: ID!
    input: UpdateReferenceInput!
  ): UpdateReferenceMutation
  referencePatch(id: ID!, input: PatchReferenceInput!): PatchReferenceMutation
  referenceDelete(id: ID!): DeleteReferenceMutation
  socialCreate(input: CreateSocialInput!): CreateSocialMutation
  socialUpdate(id: ID!, input: UpdateSocialInput!): UpdateSocialMutation
  socialPatch(id: ID!, input: PatchSocialInput!): PatchSocialMutation
  socialDelete(id: ID!): DeleteSocialMutation
  awardItemCreate(input: CreateAwardItemInput!): CreateAwardItemMutation
  awardItemUpdate(
    id: ID!
    input: UpdateAwardItemInput!
  ): UpdateAwardItemMutation
  awardItemPatch(id: ID!, input: PatchAwardItemInput!): PatchAwardItemMutation
  awardItemDelete(id: ID!): DeleteAwardItemMutation
  educationItemCreate(
    input: CreateEducationItemInput!
  ): CreateEducationItemMutation
  educationItemUpdate(
    id: ID!
    input: UpdateEducationItemInput!
  ): UpdateEducationItemMutation
  educationItemPatch(
    id: ID!
    input: PatchEducationItemInput!
  ): PatchEducationItemMutation
  educationItemDelete(id: ID!): DeleteEducationItemMutation
  skillItemCreate(input: CreateSkillItemInput!): CreateSkillItemMutation
  skillItemUpdate(
    id: ID!
    input: UpdateSkillItemInput!
  ): UpdateSkillItemMutation
  skillItemPatch(id: ID!, input: PatchSkillItemInput!): PatchSkillItemMutation
  skillItemDelete(id: ID!): DeleteSkillItemMutation
  hobbyItemCreate(input: CreateHobbyItemInput!): CreateHobbyItemMutation
  hobbyItemUpdate(
    id: ID!
    input: UpdateHobbyItemInput!
  ): UpdateHobbyItemMutation
  hobbyItemPatch(id: ID!, input: PatchHobbyItemInput!): PatchHobbyItemMutation
  hobbyItemDelete(id: ID!): DeleteHobbyItemMutation
  workItemCreate(input: CreateWorkItemInput!): CreateWorkItemMutation
  workItemUpdate(id: ID!, input: UpdateWorkItemInput!): UpdateWorkItemMutation
  workItemPatch(id: ID!, input: PatchWorkItemInput!): PatchWorkItemMutation
  workItemDelete(id: ID!): DeleteWorkItemMutation
  certificationItemCreate(
    input: CreateCertificationItemInput!
  ): CreateCertificationItemMutation
  certificationItemUpdate(
    id: ID!
    input: UpdateCertificationItemInput!
  ): UpdateCertificationItemMutation
  certificationItemPatch(
    id: ID!
    input: PatchCertificationItemInput!
  ): PatchCertificationItemMutation
  certificationItemDelete(id: ID!): DeleteCertificationItemMutation
  languageItemCreate(
    input: CreateLanguageItemInput!
  ): CreateLanguageItemMutation
  languageItemUpdate(
    id: ID!
    input: UpdateLanguageItemInput!
  ): UpdateLanguageItemMutation
  languageItemPatch(
    id: ID!
    input: PatchLanguageItemInput!
  ): PatchLanguageItemMutation
  languageItemDelete(id: ID!): DeleteLanguageItemMutation
  projectItemCreate(input: CreateProjectItemInput!): CreateProjectItemMutation
  projectItemUpdate(
    id: ID!
    input: UpdateProjectItemInput!
  ): UpdateProjectItemMutation
  projectItemPatch(
    id: ID!
    input: PatchProjectItemInput!
  ): PatchProjectItemMutation
  projectItemDelete(id: ID!): DeleteProjectItemMutation
  referenceItemCreate(
    input: CreateReferenceItemInput!
  ): CreateReferenceItemMutation
  referenceItemUpdate(
    id: ID!
    input: UpdateReferenceItemInput!
  ): UpdateReferenceItemMutation
  referenceItemPatch(
    id: ID!
    input: PatchReferenceItemInput!
  ): PatchReferenceItemMutation
  referenceItemDelete(id: ID!): DeleteReferenceItemMutation
  socialItemCreate(input: CreateSocialItemInput!): CreateSocialItemMutation
  socialItemUpdate(
    id: ID!
    input: UpdateSocialItemInput!
  ): UpdateSocialItemMutation
  socialItemPatch(
    id: ID!
    input: PatchSocialItemInput!
  ): PatchSocialItemMutation
  socialItemDelete(id: ID!): DeleteSocialItemMutation
  # Creates a new industry.
  createIndustry(
    # Fields required to create a industry.
    input: IndustryInput!
    # ID of the parent industry. If empty, industry will be top level industry.
    parent: ID
  ): IndustryCreate
  # Updates a industry.
  updateIndustry(
    # ID of a industry to update.
    id: ID!
    # Fields required to update a industry.
    input: IndustryInput!
  ): IndustryUpdate
  # Deletes a industry.
  deleteIndustry(
    # ID of a industry to delete.
    id: ID!
  ): IndustryDelete
  # Deletes industries.
  deleteIndustries(
    # List of industry IDs to delete.
    ids: [ID]!
  ): IndustryBulkDelete
  createSelectableInstitution(
    input: CreateSelectableInstitutionInput!
  ): CreateInstitution
  patchSelectableInstitution(
    id: ID!
    input: PatchSelectableInstitutionInput!
  ): PatchInstitution
  updateSelectableInstitution(
    id: ID!
    input: UpdateSelectableInstitutionInput!
  ): UpdateInstitution
  deleteSelectableInstitution(id: ID!): DeleteInstitution
  createVacancy(input: CreateJobInput!): CreateVacancyMutation
  updateVacancy(id: ID!, input: UpdateJobInput!): UpdateVacancyMutation
  patchVacancy(id: ID!, input: PatchJobInput!): PatchVacancyMutation
  deleteVacancy(id: ID!): DeleteVacancyMutation
  # Create a user avatar. This mutation must be sent as a `multipart` request.
  # More detailed specs of the upload format can be found here:
  # https://github.com/jaydenseric/graphql-multipart-request-spec
  userAvatarUpdate(
    # Represents an image file in a multipart request.
    image: Upload!
  ): UserAvatarUpdate
  # Deletes a user avatar.
  userAvatarDelete: UserAvatarDelete
  # Create a new address for the customer.
  accountAddressCreate(
    # Fields required to create address.
    input: AddressInput!
  ): AccountAddressCreate
  # Updates an address of the logged-in user.
  accountAddressUpdate(
    # ID of the address to update.
    id: ID!
    # Fields required to update the address.
    input: AddressInput!
  ): AccountAddressUpdate
  # Delete an address of the logged-in user.
  accountAddressDelete(
    # ID of the address to delete.
    id: ID!
  ): AccountAddressDelete
  # Sets a default address for the authenticated user.
  accountSetDefaultAddress(
    # ID of the address to set as default.
    id: ID!
  ): AccountSetDefaultAddress
  # Create new permission group.
  permissionGroupCreate(
    # Input fields to create permission group.
    input: PermissionGroupCreateInput!
  ): PermissionGroupCreate
  # Update permission group.
  permissionGroupUpdate(
    # ID of the group to update.
    id: ID!
    # Input fields to create permission group.
    input: PermissionGroupUpdateInput!
  ): PermissionGroupUpdate
  # Delete permission group.
  permissionGroupDelete(
    # ID of the group to delete.
    id: ID!
  ): PermissionGroupDelete
  # Create a new Seeker profile for a user.
  seekerCreate(input: CreateSeekerInput!): CreateSeekerMutation
  seekerUpdate(id: ID!, input: UpdateSeekerInput!): UpdateSeekerMutation
  seekerPatch(id: ID!, input: PatchSeekerInput!): PatchSeekerMutation
  seekerDelete(id: ID!): DeleteSeekerMutation
  employerCreate(input: CreateEmployerInput!): CreateEmployerMutation
  employerUpdate(id: ID!, input: UpdateEmployerInput!): UpdateEmployerMutation
  employerPatch(id: ID!, input: PatchEmployerInput!): PatchEmployerMutation
  employerDelete(id: ID!): DeleteEmployerMutation
  institutionCreate(input: CreateInstitutionInput!): CreateInstitutionMutation
  institutionUpdate(
    id: ID!
    input: UpdateInstitutionInput!
  ): UpdateInstitutionMutation
  institutionPatch(
    id: ID!
    input: PatchInstitutionInput!
  ): PatchInstitutionMutation
  institutionDelete(id: ID!): DeleteInstitutionMutation
  # Register user with fields defined in the settings.
  #
  # If the email field of the user model is part of the
  # registration fields (default), check if there is
  # no user with that email or as a secondary email.
  #
  # If it exists, it does not register the user,
  # even if the email field is not defined as unique
  # (default of the default django user model).
  #
  # When creating the user, it also creates a `UserStatus`
  # related to that user, making it possible to track
  # if the user is archived, verified and has a secondary
  # email.
  #
  # Send account verification email.
  #
  # If allowed to not verified users login, return token.
  register(input: RegisterInput!): RegisterPayload
  # Verify user account.
  #
  # Receive the token that was sent by email.
  # If the token is valid, make the user verified
  # by making the `user.status.verified` field true.
  verifyAccount(input: VerifyAccountInput!): VerifyAccountPayload
  # Sends activation email.
  #
  # It is called resend because theoretically
  # the first activation email was sent when
  # the user registered.
  #
  # If there is no user with the requested email,
  # a successful response is returned.
  resendActivationEmail(
    input: ResendActivationEmailInput!
  ): ResendActivationEmailPayload
  # Send password reset email.
  #
  # For non verified users, send an activation
  # email instead.
  #
  # Accepts both primary and secondary email.
  #
  # If there is no user with the requested email,
  # a successful response is returned.
  sendPasswordResetEmail(
    input: SendPasswordResetEmailInput!
  ): SendPasswordResetEmailPayload
  # Change user password without old password.
  #
  # Receive the token that was sent by email.
  #
  # If token and new passwords are valid, update
  # user password and in case of using refresh
  # tokens, revoke all of them.
  #
  # Also, if user has not been verified yet, verify it.
  passwordReset(input: PasswordResetInput!): PasswordResetPayload
  # Set user password - for passwordless registration
  #
  # Receive the token that was sent by email.
  #
  # If token and new passwords are valid, set
  # user password and in case of using refresh
  # tokens, revoke all of them.
  #
  # Also, if user has not been verified yet, verify it.
  passwordSet(input: PasswordSetInput!): PasswordSetPayload
  # Change account password when user knows the old password.
  #
  # A new token and refresh token are sent. User must be verified.
  passwordChange(input: PasswordChangeInput!): PasswordChangePayload
  # Update user model fields, defined on settings.
  #
  # User must be verified.
  updateAccount(input: UpdateAccountInput!): UpdateAccountPayload
  # Archive account and revoke refresh tokens.
  #
  # User must be verified and confirm password.
  archiveAccount(input: ArchiveAccountInput!): ArchiveAccountPayload
  # Delete account permanently or make `user.is_active=False`.
  #
  # The behavior is defined on settings.
  # Anyway user refresh tokens are revoked.
  #
  # User must be verified and confirm password.
  deleteAccount(input: DeleteAccountInput!): DeleteAccountPayload
  # Send activation to secondary email.
  #
  # User must be verified and confirm password.
  sendSecondaryEmailActivation(
    input: SendSecondaryEmailActivationInput!
  ): SendSecondaryEmailActivationPayload
  # Verify user secondary email.
  #
  # Receive the token that was sent by email.
  # User is already verified when using this mutation.
  #
  # If the token is valid, add the secondary email
  # to `user.status.secondary_email` field.
  #
  # Note that until the secondary email is verified,
  # it has not been saved anywhere beyond the token,
  # so it can still be used to create a new account.
  # After being verified, it will no longer be available.
  verifySecondaryEmail(
    input: VerifySecondaryEmailInput!
  ): VerifySecondaryEmailPayload
  # Swap between primary and secondary emails.
  #
  # Require password confirmation.
  swapEmails(input: SwapEmailsInput!): SwapEmailsPayload
  # Remove user secondary email.
  #
  # Require password confirmation.
  removeSecondaryEmail(
    input: RemoveSecondaryEmailInput!
  ): RemoveSecondaryEmailPayload
  # Obtain JSON web token for given user.
  #
  # Allow to perform login with different fields,
  # and secondary email if set. The fields are
  # defined on settings.
  #
  # Not verified users can login by default. This
  # can be changes on settings.
  #
  # If user is archived, make it unarchive and
  # return `unarchiving=True` on output.
  tokenAuth(input: ObtainJSONWebTokenInput!): ObtainJSONWebTokenPayload
  # Same as `grapgql_jwt` implementation, with standard output.
  verifyToken(input: VerifyTokenInput!): VerifyTokenPayload
  # Same as `grapgql_jwt` implementation, with standard output.
  refreshToken(input: RefreshTokenInput!): RefreshTokenPayload
  # Same as `grapgql_jwt` implementation, with standard output.
  revokeToken(input: RevokeTokenInput!): RevokeTokenPayload
}

# An object with an ID
interface Node {
  # The ID of the object.
  id: ID!
}

# Represents user's Objective in a Resume.
type ObjectiveNode implements Node {
  slug: String
  description: JSONString
  uuid: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean
  isActive: Boolean
  descriptionPlaintext: String
  # The ID of the object.
  id: ID!
  heading: String
  resume: ResumeNode
}

interface ObjectWithMetadata {
  # List of private metadata items.Requires proper staff permissions to access.
  privateMetadata: [MetadataItem]!
  # List of public metadata items. Can be accessed without permissions.
  metadata: [MetadataItem]!
}

input ObtainJSONWebTokenInput {
  clientMutationId: String
  password: String!
  email: String
  username: String
  phone: String
}

# Obtain JSON web token for given user.
#
# Allow to perform login with different fields,
# and secondary email if set. The fields are
# defined on settings.
#
# Not verified users can login by default. This
# can be changes on settings.
#
# If user is archived, make it unarchive and
# return `unarchiving=True` on output.
type ObtainJSONWebTokenPayload {
  token: String
  success: Boolean
  errors: ExpectedErrorType
  user: UserNode
  unarchiving: Boolean
  clientMutationId: String
  refreshToken: String
}

# Represents user Online Checkout Data.
type OnlineCheckout implements Node {
  user: User
  # The ID of the object.
  id: ID!
  phone: String
  amount: Float!
  isPaybill: Boolean!
  checkoutRequestId: String!
  planId: String
  accountReference: String!
  ids: String!
  transactionDescription: String
  customerMessage: String
  merchantRequestId: String
  responseCode: String
  responseDescription: String
  dateAdded: DateTime!
}

type OnlineCheckoutCountableConnection {
  # Pagination data for this connection.
  pageInfo: PageInfo!
  edges: [OnlineCheckoutCountableEdge!]!
  # A total count of items in the collection.
  totalCount: Int
}

type OnlineCheckoutCountableEdge {
  # The item at the end of the edge.
  node: OnlineCheckout!
  # A cursor for use in pagination.
  cursor: String!
}

input OnlineCheckoutInput {
  # Phone number.
  billingPhone: String
  # Total amount of the transaction, including all taxes and discounts. If no
  # amount is provided, the checkout total will be used.
  amount: PositiveDecimal
}

enum OrderAction {
  # Represents the capture action.
  CAPTURE
  # Represents a mark-as-paid action.
  MARK_AS_PAID
  # Represents a refund action.
  REFUND
  # Represents a void action.
  VOID
}

enum OrderDirection {
  # Specifies an ascending sort order.
  ASC
  # Specifies a descending sort order.
  DESC
}

# The Relay compliant `PageInfo` type, containing data necessary to paginate this connection.
type PageInfo {
  # When paginating forwards, are there more items?
  hasNextPage: Boolean!
  # When paginating backwards, are there more items?
  hasPreviousPage: Boolean!
  # When paginating backwards, the cursor to continue.
  startCursor: String
  # When paginating forwards, the cursor to continue.
  endCursor: String
}

input PasswordChangeInput {
  clientMutationId: String
  oldPassword: String!
  newPassword1: String!
  newPassword2: String!
}

# Change account password when user knows the old password.
#
# A new token and refresh token are sent. User must be verified.
type PasswordChangePayload {
  success: Boolean
  errors: ExpectedErrorType
  clientMutationId: String
  refreshToken: String
  token: String
}

input PasswordResetInput {
  clientMutationId: String
  token: String!
  newPassword1: String!
  newPassword2: String!
}

# Change user password without old password.
#
# Receive the token that was sent by email.
#
# If token and new passwords are valid, update
# user password and in case of using refresh
# tokens, revoke all of them.
#
# Also, if user has not been verified yet, verify it.
type PasswordResetPayload {
  success: Boolean
  errors: ExpectedErrorType
  clientMutationId: String
}

input PasswordSetInput {
  clientMutationId: String
  token: String!
  newPassword1: String!
  newPassword2: String!
}

# Set user password - for passwordless registration
#
# Receive the token that was sent by email.
#
# If token and new passwords are valid, set
# user password and in case of using refresh
# tokens, revoke all of them.
#
# Also, if user has not been verified yet, verify it.
type PasswordSetPayload {
  success: Boolean
  errors: ExpectedErrorType
  clientMutationId: String
}

input PatchAwardInput {
  resumePk: ID!
  uuid: UUID
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean
  isDeleted: Boolean
  heading: String
  resume: ID
  items: [ID]
  itemsAdd: [PatchAwardInputAddAwardItems]
  itemsRemove: [ID]
}

input PatchAwardInputAddAwardItems {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  organization: String
  title: String
  date: Date
}

input PatchAwardItemInput {
  uuid: UUID
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  award: ID
  organization: String
  title: String
  date: Date
}

type PatchAwardItemMutation {
  awardItem: AwardItem
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type PatchAwardMutation {
  award: AwardNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

input PatchCertificationInput {
  resumePk: ID!
  uuid: UUID
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  resume: ID
  items: [ID]
  itemsAdd: [PatchCertificationInputAddCertificationItems]
  itemsRemove: [ID]
}

input PatchCertificationInputAddCertificationItems {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  issuer: String
  title: String
  date: Date
}

input PatchCertificationItemInput {
  uuid: UUID
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  certification: ID
  issuer: String
  title: String
  date: Date
}

type PatchCertificationItemMutation {
  certificationItem: CertificationItem
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type PatchCertificationMutation {
  certification: CertificationNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

input PatchEducationInput {
  resumePk: ID!
  uuid: UUID
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  resume: ID
  items: [ID]
  itemsAdd: [PatchEducationInputAddEducationItems]
  itemsRemove: [ID]
}

input PatchEducationInputAddEducationItems {
  level: EducationItemLevel
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  institution: String
  fieldOfStudy: String
  gpa: String
  schoolStart: Date!
  schoolEnd: Date!
}

input PatchEducationItemInput {
  level: EducationItemLevel
  uuid: UUID
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  education: ID
  institution: String
  fieldOfStudy: String
  gpa: String
  schoolStart: Date
  schoolEnd: Date
}

type PatchEducationItemMutation {
  educationItem: EducationItem
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type PatchEducationMutation {
  education: EducationNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

input PatchEmployerInput {
  workForce: EmployerWorkForce
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  name: String
  website: String
  country: String
  location: String
  mobile: String
  regNo: Int
  lookingFor: String
  industries: [ID]
}

type PatchEmployerMutation {
  employer: EmployerNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  employerErrors: [AccountError!]!
}

input PatchHobbyInput {
  resumePk: ID!
  uuid: UUID
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  resume: ID
  items: [ID]
  itemsAdd: [PatchHobbyInputAddHobbyItems]
  itemsRemove: [ID]
}

input PatchHobbyInputAddHobbyItems {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  name: String
}

input PatchHobbyItemInput {
  uuid: UUID
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean
  isDeleted: Boolean
  hobby: ID
  name: String
}

type PatchHobbyItemMutation {
  hobbyItem: HobbyItem
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type PatchHobbyMutation {
  hobby: HobbyNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type PatchInstitution {
  institution: Institution
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  vacancyErrors: [VacancyError!]!
}

input PatchInstitutionInput {
  studentCount: InstitutionStudentCount
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  name: String
  website: String
  country: String
  location: String
  mobile: String
  regNo: String
}

type PatchInstitutionMutation {
  institution: InstitutionNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  institutionErrors: [AccountError!]!
}

input PatchJobInput {
  jobType: JobJobType
  minQualification: JobMinQualification
  yearsOfExp: JobYearsOfExp
  payRate: JobPayRate
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean
  description: JSONString
  descriptionPlaintext: String
  seoTitle: String
  seoDescription: String
  title: String
  industry: ID
  currency: String
  salary: Decimal
  location: String
  jobTags: String
  closingDate: Date
  applicationEmail: String
  positions: Int
  applicationSet: [ID]
  bookmarked: [ID]
}

input PatchLanguageInput {
  resumePk: ID!
  uuid: UUID
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  resume: ID
  items: [ID]
  itemsAdd: [PatchLanguageInputAddLanguageItems]
  itemsRemove: [ID]
}

input PatchLanguageInputAddLanguageItems {
  level: LanguageItemLevel
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  title: String
}

input PatchLanguageItemInput {
  level: LanguageItemLevel
  uuid: UUID
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  language: ID
  title: String
}

type PatchLanguageItemMutation {
  languageItem: LanguageItem
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type PatchLanguageMutation {
  language: LanguageNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

input PatchLayoutInput {
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  metadata: ID
  name: String
  collection: [[String]]
}

type PatchLayoutMutation {
  layout: LayoutNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

input PatchProjectInput {
  resumePk: ID!
  uuid: UUID
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  resume: ID
  items: [ID]
  itemsAdd: [PatchProjectInputAddProjectItems]
  itemsRemove: [ID]
}

input PatchProjectInputAddProjectItems {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  title: String!
  startDate: Date
  endDate: Date
  link: String
}

input PatchProjectItemInput {
  uuid: UUID
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean
  isDeleted: Boolean
  project: ID
  title: String
  startDate: Date
  endDate: Date
  link: String
}

type PatchProjectItemMutation {
  projectItem: ProjectItem
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type PatchProjectMutation {
  project: ProjectNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

input PatchReferenceInput {
  resumePk: ID!
  uuid: UUID
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  resume: ID
  items: [ID]
  itemsAdd: [PatchReferenceInputAddReferenceItems]
  itemsRemove: [ID]
}

input PatchReferenceInputAddReferenceItems {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  email: String!
  position: String
  fullName: String!
  mobile: String
  summary: String
}

input PatchReferenceItemInput {
  uuid: UUID
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean
  isDeleted: Boolean
  reference: ID
  email: String
  position: String
  fullName: String
  mobile: String
  summary: String
}

type PatchReferenceItemMutation {
  referenceItem: ReferenceItem
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type PatchReferenceMutation {
  reference: ReferenceNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

input PatchResumeInput {
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  privateMetadata: JSONString
  metadata: JSONString
  seoTitle: String
  seoDescription: String
  public: Boolean
  name: String
  owner: ID
  objective: PatchResumeInputCreateObjective
  education: PatchResumeInputCreateEducation
  skill: PatchResumeInputCreateSkill
  hobby: PatchResumeInputCreateHobby
  work: PatchResumeInputCreateWork
  award: PatchResumeInputCreateAward
  certification: PatchResumeInputCreateCertification
  language: PatchResumeInputCreateLanguage
  resumemetadata: PatchResumeInputCreateResumemetadata
  project: PatchResumeInputCreateProject
  reference: PatchResumeInputCreateReference
  social: PatchResumeInputCreateSocial
}

input PatchResumeInputCreateAward {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  heading: String
  items: [ID]
  itemsAdd: [CreateAwardItemInput]
  itemsUpdate: [PatchResumeInputCreateAwardUpdateAwardItems]
  itemsRemove: [ID]
}

input PatchResumeInputCreateAwardUpdateAwardItems {
  id: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  organization: String
  title: String
  date: Date
}

input PatchResumeInputCreateCertification {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  items: [ID]
  itemsAdd: [CreateCertificationItemInput]
  itemsUpdate: [PatchResumeInputCreateCertificationUpdateCertificationItems]
  itemsRemove: [ID]
}

input PatchResumeInputCreateCertificationUpdateCertificationItems {
  id: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  issuer: String
  title: String
  date: Date
}

input PatchResumeInputCreateEducation {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  items: [ID]
  itemsAdd: [CreateEducationItemInput]
  itemsUpdate: [PatchResumeInputCreateEducationUpdateEducationItems]
  itemsRemove: [ID]
}

input PatchResumeInputCreateEducationUpdateEducationItems {
  level: EducationItemLevel
  id: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  institution: String
  fieldOfStudy: String
  gpa: String
  schoolStart: Date!
  schoolEnd: Date!
}

input PatchResumeInputCreateHobby {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  items: [ID]
  itemsAdd: [CreateHobbyItemInput]
  itemsUpdate: [PatchResumeInputCreateHobbyUpdateHobbyItems]
  itemsRemove: [ID]
}

input PatchResumeInputCreateHobbyUpdateHobbyItems {
  id: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  name: String
}

input PatchResumeInputCreateLanguage {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  items: [ID]
  itemsAdd: [CreateLanguageItemInput]
  itemsUpdate: [PatchResumeInputCreateLanguageUpdateLanguageItems]
  itemsRemove: [ID]
}

input PatchResumeInputCreateLanguageUpdateLanguageItems {
  level: LanguageItemLevel
  id: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  title: String
}

input PatchResumeInputCreateObjective {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
}

input PatchResumeInputCreateProject {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  items: [ID]
  itemsAdd: [CreateProjectItemInput]
  itemsUpdate: [PatchResumeInputCreateProjectUpdateProjectItems]
  itemsRemove: [ID]
}

input PatchResumeInputCreateProjectUpdateProjectItems {
  id: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  title: String!
  startDate: Date
  endDate: Date
  link: String
}

input PatchResumeInputCreateReference {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  items: [ID]
  itemsAdd: [CreateReferenceItemInput]
  itemsUpdate: [PatchResumeInputCreateReferenceUpdateReferenceItems]
  itemsRemove: [ID]
}

input PatchResumeInputCreateReferenceUpdateReferenceItems {
  id: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  email: String!
  position: String
  fullName: String!
  mobile: String
  summary: String
}

input PatchResumeInputCreateResumemetadata {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  backgroundColor: String!
  primaryColor: String!
  textColor: String!
  font: String!
  fontSize: String!
  language: String
  layouts: [ID]
}

input PatchResumeInputCreateSkill {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  items: [ID]
  itemsAdd: [CreateSkillItemInput]
  itemsUpdate: [PatchResumeInputCreateSkillUpdateSkillItems]
  itemsRemove: [ID]
}

input PatchResumeInputCreateSkillUpdateSkillItems {
  proficiency: SkillItemProficiency
  id: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  name: String
}

input PatchResumeInputCreateSocial {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  owner: ID
  items: [ID]
  itemsAdd: [CreateSocialItemInput]
  itemsUpdate: [PatchResumeInputCreateSocialUpdateSocialItems]
  itemsRemove: [ID]
}

input PatchResumeInputCreateSocialUpdateSocialItems {
  id: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  link: String
  network: String
  username: String
}

input PatchResumeInputCreateWork {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  items: [ID]
  itemsAdd: [CreateWorkItemInput]
  itemsUpdate: [PatchResumeInputCreateWorkUpdateWorkItems]
  itemsRemove: [ID]
}

input PatchResumeInputCreateWorkUpdateWorkItems {
  id: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  company: String
  position: String
  workStart: Date
  workEnd: Date
  achievements: String
  website: String
}

input PatchResumeMetaDataInput {
  resumePk: ID!
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  resume: ID
  backgroundColor: String
  primaryColor: String
  textColor: String
  font: String
  fontSize: String
  language: String
  layouts: [ID]
}

type PatchResumeMetaDataMutation {
  resumeMetaData: ResumeMetaDataNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type PatchResumeMutation {
  resume: ResumeNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

input PatchSeekerInput {
  gender: SeekerGender
  status: SeekerStatus
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  title: String
  idNumber: Int
  dateOfBirth: Date
  location: String
  institution: String
  course: String
  address: ID
  industries: [ID]
  mobile: String
}

type PatchSeekerMutation {
  seeker: SeekerNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  seekerErrors: [AccountError!]!
}

input PatchSelectableInstitutionInput {
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean
  description: JSONString
  descriptionPlaintext: String
  privateMetadata: JSONString
  metadata: JSONString
  seoTitle: String
  seoDescription: String
  name: String
  backgroundImageAlt: String
}

input PatchSkillInput {
  resumePk: ID!
  uuid: UUID
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  resume: ID
  items: [ID]
  itemsAdd: [PatchSkillInputAddSkillItems]
  itemsRemove: [ID]
}

input PatchSkillInputAddSkillItems {
  proficiency: SkillItemProficiency
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  name: String
}

input PatchSkillItemInput {
  proficiency: SkillItemProficiency
  uuid: UUID
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean
  isDeleted: Boolean
  skill: ID
  name: String
}

type PatchSkillItemMutation {
  skillItem: SkillItem
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type PatchSkillMutation {
  skill: SkillNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

input PatchSocialInput {
  resumePk: ID!
  uuid: UUID
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  resume: ID
  owner: ID
  items: [ID]
  itemsAdd: [PatchSocialInputAddSocialItems]
  itemsRemove: [ID]
}

input PatchSocialInputAddSocialItems {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  link: String
  network: String
  username: String
}

input PatchSocialItemInput {
  uuid: UUID
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean
  isDeleted: Boolean
  social: ID
  link: String
  network: String
  username: String
}

type PatchSocialItemMutation {
  socialItem: SocialItem
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type PatchSocialMutation {
  social: SocialNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type PatchVacancyMutation {
  job: Vacancy
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  vacancyErrors: [VacancyError!]!
}

input PatchWorkInput {
  resumePk: ID!
  uuid: UUID
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  resume: ID
  items: [ID]
  itemsAdd: [PatchWorkInputAddWorkItems]
  itemsRemove: [ID]
}

input PatchWorkInputAddWorkItems {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  company: String
  position: String
  workStart: Date
  workEnd: Date
  achievements: String
  website: String
}

input PatchWorkItemInput {
  uuid: UUID
  slug: String
  createdAt: DateTime
  updatedAt: DateTime
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  work: ID
  company: String
  position: String
  workStart: Date
  workEnd: Date
  achievements: String
  website: String
}

type PatchWorkItemMutation {
  workItem: WorkItem
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type PatchWorkMutation {
  work: WorkNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

# Represents a payment of a given type.
type Payment implements Node {
  # The ID of the object.
  id: ID!
  gateway: String!
  isActive: Boolean!
  created: DateTime!
  modified: DateTime!
  token: String!
  customerIpAddress: String
  # Internal payment status.
  chargeStatus: PaymentChargeStatusEnum!
  # List of actions that can be performed in the current state of a payment.
  actions: [OrderAction]!
  # Total amount of the payment.
  total: Money
  # Total amount captured for this payment.
  capturedAmount: Money
  # List of all transactions within this payment.
  transactions: [Transaction]
  # Maximum amount of money that can be captured.
  availableCaptureAmount: Money
  # Maximum amount of money that can be refunded.
  availableRefundAmount: Money
  # The details of the card used for this payment.
  creditCard: CreditCard
}

# Captures the authorized payment amount.
type PaymentCapture {
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  # Updated payment.
  payment: Payment
  paymentErrors: [PaymentError!]!
}

# An enumeration.
enum PaymentChargeStatusEnum {
  NOT_CHARGED
  PENDING
  PARTIALLY_CHARGED
  FULLY_CHARGED
  PARTIALLY_REFUNDED
  FULLY_REFUNDED
  REFUSED
  CANCELLED
}

type PaymentCountableConnection {
  # Pagination data for this connection.
  pageInfo: PageInfo!
  edges: [PaymentCountableEdge!]!
  # A total count of items in the collection.
  totalCount: Int
}

type PaymentCountableEdge {
  # The item at the end of the edge.
  node: Payment!
  # A cursor for use in pagination.
  cursor: String!
}

type PaymentError {
  # Name of a field that caused the error. A value of `null` indicates that the
  # error isn't associated with a particular field.
  field: String
  # The error message.
  message: String
  # The error code.
  code: PaymentErrorCode!
}

# An enumeration.
enum PaymentErrorCode {
  ADDRESS_NOT_SET
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
  PARTIAL_PAYMENT_NOT_ALLOWED
  PAYMENT_ERROR
  NOT_SUPPORTED_GATEWAY
}

# Initializes payment process when it is required by gateway.
type PaymentInitialize {
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  initializedPayment: PaymentInitialized
  paymentErrors: [PaymentError!]!
}

# Server-side data generated by a payment gateway. Optional step when the payment
# provider requires an additional action to initialize payment session.
type PaymentInitialized {
  # ID of a payment gateway.
  gateway: String!
  # Payment gateway name.
  name: String!
  # Initialized data by gateway.
  data: JSONString
}

input PaymentInput {
  # A gateway to use with that payment.
  gateway: String!
  # Client-side generated payment token, representing customer's billing data in a secure manner.
  token: String
  # Phone number.
  billingPhone: String
  # Total amount of the transaction, including all taxes and discounts. If no
  # amount is provided, the checkout total will be used.
  amount: PositiveDecimal
  # URL of a storefront view where user should be redirected after requiring
  # additional actions. Payment with additional actions will not be finished if
  # this field is not provided.
  returnUrl: String
}

# Refunds the captured payment amount.
type PaymentRefund {
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  # Updated payment.
  payment: Payment
  paymentErrors: [PaymentError!]!
}

# Voids the authorized payment.
type PaymentVoid {
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  # Updated payment.
  payment: Payment
  paymentErrors: [PaymentError!]!
}

# Represents a permission object in a friendly form.
type Permission {
  # Internal code for permission.
  code: PermissionEnum!
  # Describe action(s) allowed to do by permission.
  name: String!
}

# An enumeration.
enum PermissionEnum {
  MANAGE_USERS
  MANAGE_STAFF
  MANAGE_PLUGINS
  MANAGE_SETTINGS
  MANAGE_VACANCIES
  MANAGE_SUBSCRIPTIONS
}

# Create new permission group.
type PermissionGroupCreate {
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  permissionGroupErrors: [PermissionGroupError!]!
  group: Group
}

input PermissionGroupCreateInput {
  # List of permission code names to assign to this group.
  addPermissions: [PermissionEnum!]
  # List of users to assign to this group.
  addUsers: [ID!]
  # Group name.
  name: String!
}

# Delete permission group.
type PermissionGroupDelete {
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  permissionGroupErrors: [PermissionGroupError!]!
  group: Group
}

type PermissionGroupError {
  # Name of a field that caused the error. A value of `null` indicates that the
  # error isn't associated with a particular field.
  field: String
  # The error message.
  message: String
  # The error code.
  code: PermissionGroupErrorCode!
  # List of permissions which causes the error.
  permissions: [PermissionEnum!]
  # List of user IDs which causes the error.
  users: [ID!]
}

# An enumeration.
enum PermissionGroupErrorCode {
  ASSIGN_NON_STAFF_MEMBER
  DUPLICATED_INPUT_ITEM
  CANNOT_REMOVE_FROM_LAST_GROUP
  LEFT_NOT_MANAGEABLE_PERMISSION
  OUT_OF_SCOPE_PERMISSION
  OUT_OF_SCOPE_USER
  REQUIRED
  UNIQUE
}

input PermissionGroupFilterInput {
  search: String
}

enum PermissionGroupSortField {
  # Sort permission group accounts by name.
  NAME
}

input PermissionGroupSortingInput {
  # Specifies the direction in which to sort products.
  direction: OrderDirection!
  # Sort permission group by the selected field.
  field: PermissionGroupSortField!
}

# Update permission group.
type PermissionGroupUpdate {
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  permissionGroupErrors: [PermissionGroupError!]!
  group: Group
}

input PermissionGroupUpdateInput {
  # List of permission code names to assign to this group.
  addPermissions: [PermissionEnum!]
  # List of users to assign to this group.
  addUsers: [ID!]
  # Group name.
  name: String
  # List of permission code names to unassign from this group.
  removePermissions: [PermissionEnum!]
  # List of users to unassign from this group.
  removeUsers: [ID!]
}

# Plan object.
type Plan implements Node {
  # The ID of the object.
  id: ID!
  slug: String!
  planList: PlanList!
  title: String
  collection: [String!]
  description: String!
  isActive: Boolean!
  isNotPriced: Boolean!
  createdAt: DateTime
  discontinuedAt: DateTime
  unit: String!
  skipOptinOnGrant: Boolean!
  optinOnRequest: Boolean!
  recurring: Boolean!
  # One-time charge amount in currency unit
  setupAmount: Int!
  # Recurring amount per period in currency unit
  periodAmount: Int!
  # Recurring Discount in currency unit
  discountedPeriodAmount: Int!
  periodType: PlanPeriodType!
  # Natural period length of a subscription to the plan (monthly, yearly, etc.)
  periodLength: Int!
  # Number of natural periods before a subscription to the plan ends (default to 1)
  length: Int
  renewalType: PlanRenewalType!
  nextPlan: Plan
  # Extra meta data (can be stringify JSON)
  extra: String
  planSet(
    before: String
    after: String
    first: Int
    last: Int
    title: String
    description: String
  ): PlanCountableConnection!
  payments(
    before: String
    after: String
    first: Int
    last: Int
    id: ID
  ): PaymentCountableConnection!
}

type PlanCountableConnection {
  # Pagination data for this connection.
  pageInfo: PageInfo!
  edges: [PlanCountableEdge!]!
  # A total count of items in the collection.
  totalCount: Int
}

type PlanCountableEdge {
  # The item at the end of the edge.
  node: Plan!
  # A cursor for use in pagination.
  cursor: String!
}

# Represents a single plan list.
type PlanList implements Node {
  uuid: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean
  isActive: Boolean
  # The ID of the object.
  id: ID!
  # title to display on the subscription plan list page
  title: String
  userType: PlanListUserType!
  # slug to reference the subscription plan list
  slug: String
  # subtitle to display on the subscription plan list page
  subtitle: String
  # header text to display on the subscription plan list page
  header: String
  # header text to display on the subscription plan list page
  footer: String
  # whether this plan list is active or not.
  active: Boolean!
  planList(
    before: String
    after: String
    first: Int
    last: Int
    title: String
    description: String
  ): PlanCountableConnection!
  # List of all plans.
  allPlans: [Plan!]!
}

type PlanListCountableConnection {
  # Pagination data for this connection.
  pageInfo: PageInfo!
  edges: [PlanListCountableEdge!]!
  # A total count of items in the collection.
  totalCount: Int
}

type PlanListCountableEdge {
  # The item at the end of the edge.
  node: PlanList!
  # A cursor for use in pagination.
  cursor: String!
}

input PlanListFilterInput {
  search: String
  userType: String
  ids: [ID]
}

# An enumeration.
enum PlanListUserType {
  # employer
  EMPLOYER
  # seeker
  SEEKER
  # institution
  INSTITUTION
}

# An enumeration.
enum PlanPeriodType {
  # HOURLY
  A_1
  # DAILY
  A_2
  # WEEKLY
  A_3
  # MONTHLY
  A_4
  # YEARLY
  A_5
}

# An enumeration.
enum PlanRenewalType {
  # ONE-TIME
  A_0
  # AUTO-RENEW
  A_1
  # REPEAT
  A_2
}

enum PlanSortField {
  # Sort plans by name.
  NAME
}

input PlanSortingInput {
  # Specifies the direction in which to sort products.
  direction: OrderDirection!
  # Sort categories by the selected field.
  field: PlanSortField!
}

# Plugin.
type Plugin implements Node {
  id: ID!
  name: String!
  description: String!
  active: Boolean!
  configuration: [ConfigurationItem]
}

type PluginCountableConnection {
  # Pagination data for this connection.
  pageInfo: PageInfo!
  edges: [PluginCountableEdge!]!
  # A total count of items in the collection.
  totalCount: Int
}

type PluginCountableEdge {
  # The item at the end of the edge.
  node: Plugin!
  # A cursor for use in pagination.
  cursor: String!
}

type PluginError {
  # Name of a field that caused the error. A value of `null` indicates that the
  # error isn't associated with a particular field.
  field: String
  # The error message.
  message: String
  # The error code.
  code: PluginErrorCode!
}

# An enumeration.
enum PluginErrorCode {
  GRAPHQL_ERROR
  INVALID
  PLUGIN_MISCONFIGURED
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input PluginFilterInput {
  active: Boolean
  search: String
}

enum PluginSortField {
  NAME
  IS_ACTIVE
}

input PluginSortingInput {
  # Specifies the direction in which to sort products.
  direction: OrderDirection!
  # Sort plugins by the selected field.
  field: PluginSortField!
}

# Update plugin configuration.
type PluginUpdate {
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  plugin: Plugin
  pluginsErrors: [PluginError!]!
}

input PluginUpdateInput {
  # Indicates whether the plugin should be enabled.
  active: Boolean
  # Configuration of the plugin.
  configuration: [ConfigurationItemInput]
}

# Positive Decimal scalar implementation
.
#
# Should be used in places where value must be positive.
scalar PositiveDecimal

# Represents user's Projects collection in a Resume.
type ProjectItem implements Node {
  slug: String
  uuid: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean
  isActive: Boolean
  # The ID of the object.
  id: ID!
  project: ProjectNode
  title: String!
  startDate: Date
  endDate: Date
  link: String
}

# Represents user's Projects collection in a Resume.
type ProjectNode implements Node {
  slug: String
  description: JSONString
  uuid: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean
  isActive: Boolean
  descriptionPlaintext: String
  # The ID of the object.
  id: ID!
  heading: String
  resume: ResumeNode
  # Socials list of the education section
  items: [ProjectItem!]
}

type Query {
  # Look up a plugin by ID.
  plugin(
    # ID of the plugin.
    id: ID!
  ): Plugin
  # List of plugins.
  plugins(
    # Filtering options for plugins.
    filter: PluginFilterInput
    # Sort plugins.
    sortBy: PluginSortingInput
    # Return the elements in the list that come before the specified cursor.
    before: String
    # Return the elements in the list that come after the specified cursor.
    after: String
    # Return the first n elements from the list.
    first: Int
    # Return the last n elements from the list.
    last: Int
  ): PluginCountableConnection
  # Look up a payment by ID.
  payment(
    # ID of the payment.
    id: ID!
  ): Payment
  # List of payments.
  payments(
    # Return the elements in the list that come before the specified cursor.
    before: String
    # Return the elements in the list that come after the specified cursor.
    after: String
    # Return the first n elements from the list.
    first: Int
    # Return the last n elements from the list.
    last: Int
  ): PaymentCountableConnection
  # Look up a resume by ID.
  resume(
    # ID of an resume
    id: ID!
  ): ResumeNode
  # List of vacancies.
  resumes(
    filter: ResumeFilterInput
    sortBy: ResumeSortingInput
    # Return the elements in the list that come before the specified cursor.
    before: String
    # Return the elements in the list that come after the specified cursor.
    after: String
    # Return the first n elements from the list.
    first: Int
    # Return the last n elements from the list.
    last: Int
  ): ResumeNodeCountableConnection
  # List of all of seeker resumes.
  myResumes: [ResumeNode!]!
  # List of all of seeker resumes.
  allResumes: [ResumeNode!]!
  # Look up a industry by ID.
  industry(
    # ID of an industry
    id: ID!
  ): Industry
  # List of industries.
  industries(
    filter: IndustryFilterInput
    sortBy: IndustrySortingInput
    # Return the elements in the list that come before the specified cursor.
    before: String
    # Return the elements in the list that come after the specified cursor.
    after: String
    # Return the first n elements from the list.
    first: Int
    # Return the last n elements from the list.
    last: Int
  ): IndustryCountableConnection
  # List of all industries.
  allIndustries: [Industry!]!
  # Look up a institution by ID.
  institution(
    # ID of an institution
    id: ID!
  ): Institution
  # List of institutions.
  institutions(
    # Filtering options for institutions.
    filter: InstitutionFilterInput
    # Sort institutions.
    sortBy: InstitutionSortingInput
    # Return the elements in the list that come before the specified cursor.
    before: String
    # Return the elements in the list that come after the specified cursor.
    after: String
    # Return the first n elements from the list.
    first: Int
    # Return the last n elements from the list.
    last: Int
  ): InstitutionNodeCountableConnection
  # List of all institutions.
  allInstitutions: [Institution!]!
  # Look up a vacancy by ID.
  vacancy(
    # ID of an vacancy
    id: ID!
  ): Vacancy
  # List of vacancies.
  vacancies(
    filter: VacancyFilterInput
    sortBy: VacancySortingInput
    # Return the elements in the list that come before the specified cursor.
    before: String
    # Return the elements in the list that come after the specified cursor.
    after: String
    # Return the first n elements from the list.
    first: Int
    # Return the last n elements from the list.
    last: Int
  ): VacancyCountableConnection
  # List of all of employers vacancies.
  myVacancies: [Vacancy!]!
  # List of all of vacancies.
  allVacancies: [Vacancy!]!
  # Return the currently authenticated user's profile.
  bookmarkedJobs: [Vacancy]
  # Returns address validation rules.
  addressValidationRules(
    # Two-letter ISO 3166-1 country code.
    countryCode: CountryCode!
    # Designation of a region, province or state.
    countryArea: String
    # City or a town name.
    city: String
    # Sublocality like a district.
    cityArea: String
  ): AddressValidationData
  # Look up an address by ID.
  address(
    # ID of an address.
    id: ID!
  ): Address
  # List of permission groups.
  permissionGroups(
    # Filtering options for permission groups.
    filter: PermissionGroupFilterInput
    # Sort permission groups.
    sortBy: PermissionGroupSortingInput
    # Return the elements in the list that come before the specified cursor.
    before: String
    # Return the elements in the list that come after the specified cursor.
    after: String
    # Return the first n elements from the list.
    first: Int
    # Return the last n elements from the list.
    last: Int
  ): GroupCountableConnection
  # Look up permission group by ID.
  permissionGroup(
    # ID of the group.
    id: ID!
  ): Group
  # Return the currently authenticated user.
  me: User
  # List of the shop's staff users.
  staffUsers(
    # Filtering options for staff users.
    filter: StaffUserInput
    # Sort staff users.
    sortBy: UserSortingInput
    # Return the elements in the list that come before the specified cursor.
    before: String
    # Return the elements in the list that come after the specified cursor.
    after: String
    # Return the first n elements from the list.
    first: Int
    # Return the last n elements from the list.
    last: Int
  ): UserCountableConnection
  # The ID of the object
  user(id: ID!): UserNode
  # List of employers.
  employers(
    # Filtering options for employers.
    filter: EmployerFilterInput
    # Sort employers.
    sortBy: EmployerSortingInput
    # Return the elements in the list that come before the specified cursor.
    before: String
    # Return the elements in the list that come after the specified cursor.
    after: String
    # Return the first n elements from the list.
    first: Int
    # Return the last n elements from the list.
    last: Int
  ): EmployerNodeCountableConnection
  # List of seekers.
  seekers(
    # Filtering options for seekers.
    filter: SeekerFilterInput
    # Sort seekers.
    sortBy: SeekerSortingInput
    # Return the elements in the list that come before the specified cursor.
    before: String
    # Return the elements in the list that come after the specified cursor.
    after: String
    # Return the first n elements from the list.
    first: Int
    # Return the last n elements from the list.
    last: Int
  ): SeekerNodeCountableConnection
  # Look up a plan by ID.
  plan(
    # ID of an plan
    id: ID!
  ): Plan
  # Look up a plan list by ID.
  planList(
    # ID of an plan list
    id: ID!
  ): PlanList
  # List of plans.
  plans(
    sortBy: PlanSortingInput
    # Return the elements in the list that come before the specified cursor.
    before: String
    # Return the elements in the list that come after the specified cursor.
    after: String
    # Return the first n elements from the list.
    first: Int
    # Return the last n elements from the list.
    last: Int
  ): PlanCountableConnection
  # List of plan lists.
  planLists(
    filter: PlanListFilterInput
    # Return the elements in the list that come before the specified cursor.
    before: String
    # Return the elements in the list that come after the specified cursor.
    after: String
    # Return the first n elements from the list.
    first: Int
    # Return the last n elements from the list.
    last: Int
  ): PlanListCountableConnection
  # List of all plans.
  allPlans: [Plan!]!
  # List of all plan lists.
  allPlanLists: [PlanList!]!
  users(
    before: String
    after: String
    first: Int
    last: Int
    email: String
    username: String
    username_Icontains: String
    username_Istartswith: String
    isActive: Boolean
    status_Archived: Boolean
    status_Verified: Boolean
    status_SecondaryEmail: String
  ): UserNodeConnection
  _entities(representations: [_Any]): [_Entity]
  _service: _Service
}

# Represents user's References in a Resume.
type ReferenceItem implements Node {
  slug: String
  uuid: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean
  isActive: Boolean
  # The ID of the object.
  id: ID!
  reference: ReferenceNode
  email: String!
  position: String!
  fullName: String!
  mobile: String
  summary: String!
}

# Represents user's References in a Resume.
type ReferenceNode implements Node {
  slug: String
  description: JSONString
  uuid: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean
  isActive: Boolean
  descriptionPlaintext: String
  # The ID of the object.
  id: ID!
  heading: String
  resume: ResumeNode
  # Socials list of the education section
  items: [ReferenceItem!]
}

input RefreshTokenInput {
  refreshToken: String!
  clientMutationId: String
}

# Same as `grapgql_jwt` implementation, with standard output.
type RefreshTokenPayload {
  token: String
  payload: GenericScalar
  success: Boolean
  errors: ExpectedErrorType
  clientMutationId: String
  refreshToken: String
}

input RegisterInput {
  clientMutationId: String
  email: String!
  username: String!
  phone: String!
  isSeeker: Boolean!
  isEmployer: Boolean!
  isInstitution: Boolean!
  password1: String!
  password2: String!
}

# Register user with fields defined in the settings.
#
# If the email field of the user model is part of the
# registration fields (default), check if there is
# no user with that email or as a secondary email.
#
# If it exists, it does not register the user,
# even if the email field is not defined as unique
# (default of the default django user model).
#
# When creating the user, it also creates a `UserStatus`
# related to that user, making it possible to track
# if the user is archived, verified and has a secondary
# email.
#
# Send account verification email.
#
# If allowed to not verified users login, return token.
type RegisterPayload {
  success: Boolean
  errors: ExpectedErrorType
  clientMutationId: String
  refreshToken: String
  token: String
}

input RemoveSecondaryEmailInput {
  clientMutationId: String
  password: String!
}

# Remove user secondary email.
#
# Require password confirmation.
type RemoveSecondaryEmailPayload {
  success: Boolean
  errors: ExpectedErrorType
  clientMutationId: String
}

input ResendActivationEmailInput {
  clientMutationId: String
  email: String!
}

# Sends activation email.
#
# It is called resend because theoretically
# the first activation email was sent when
# the user registered.
#
# If there is no user with the requested email,
# a successful response is returned.
type ResendActivationEmailPayload {
  success: Boolean
  errors: ExpectedErrorType
  clientMutationId: String
}

input ResumeFilterInput {
  search: String
  ids: [ID]
}

# Represents Resume extras, settings and such.
type ResumeMetaDataNode implements Node {
  slug: String
  description: JSONString
  uuid: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean
  isActive: Boolean
  descriptionPlaintext: String
  # The ID of the object.
  id: ID!
  resume: ResumeNode
  backgroundColor: String!
  primaryColor: String!
  textColor: String!
  font: String!
  fontSize: String!
  language: String!
  layouts(
    before: String
    after: String
    first: Int
    last: Int
  ): LayoutNodeCountableConnection!
  # Layouts list of the resume metadata
  allLayouts: [LayoutNode!]
}

# Represents user's Resume.
type ResumeNode implements Node {
  slug: String
  description: JSONString
  seoTitle: String
  seoDescription: String
  uuid: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean
  privateMetadata: JSONString
  metadata: JSONString
  isActive: Boolean
  descriptionPlaintext: String
  # The ID of the object.
  id: ID!
  public: Boolean!
  name: String!
  owner: User
  objective: ObjectiveNode
  education: EducationNode
  skill: SkillNode
  hobby: HobbyNode
  work: WorkNode
  award: AwardNode
  certification: CertificationNode
  language: LanguageNode
  resumemetadata: ResumeMetaDataNode
  project: ProjectNode
  reference: ReferenceNode
  social: SocialNode
  # List of all of seeker addresses.
  addresses: [Address!]!
  # Default Address of the user
  defaultAddress: Address
  # Metadata of the resume
  allResumemetadata: [ResumeMetaDataNode!]
  # Education list of the resume
  allEducation: [EducationNode!]
  # Skills list of the resume
  allSkills: [SkillNode!]
  # Hobbies list of the resume
  allHobbies: [HobbyNode!]
  # Work list of the resume
  allWork: [WorkNode!]
  # Awards list of the resume
  allAwards: [AwardNode!]
  # Certifications of the resume
  allCertifications: [CertificationNode!]
  # Languages list of the resume
  allLanguages: [LanguageNode!]
  # Layouts list of the resume metadata
  allLayouts: [LayoutNode!]
  # Projects list of the resume
  allProjects: [ProjectNode!]
  # References list of the resume
  allReferences: [ReferenceNode!]
  # Socials list of the resume
  allSocials: [SocialNode!]
}

type ResumeNodeCountableConnection {
  # Pagination data for this connection.
  pageInfo: PageInfo!
  edges: [ResumeNodeCountableEdge!]!
  # A total count of items in the collection.
  totalCount: Int
}

type ResumeNodeCountableEdge {
  # The item at the end of the edge.
  node: ResumeNode!
  # A cursor for use in pagination.
  cursor: String!
}

enum ResumeSortField {
  # Sort resumes by name.
  NAME
}

input ResumeSortingInput {
  # Specifies the direction in which to sort products.
  direction: OrderDirection!
  # Sort resumes by the selected field.
  field: ResumeSortField!
}

input RevokeTokenInput {
  refreshToken: String!
  clientMutationId: String
}

# Same as `grapgql_jwt` implementation, with standard output.
type RevokeTokenPayload {
  revoked: Int
  success: Boolean
  errors: ExpectedErrorType
  clientMutationId: String
}

input SeekerFilterInput {
  search: String
  ids: [ID]
}

# An enumeration.
enum SeekerGender {
  # Male
  MALE
  # Female
  FEMALE
}

# Represents user's Extended profie as Job Seeker.
type SeekerNode implements Node {
  slug: String
  description: JSONString
  uuid: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean
  # The ID of the object.
  id: ID!
  isActive: Boolean
  descriptionPlaintext: String
  user: User!
  title: String!
  idNumber: Int!
  dateOfBirth: Date
  location: String
  institution: String
  course: String
  address: Address
  gender: SeekerGender
  status: SeekerStatus!
  industries(
    before: String
    after: String
    first: Int
    last: Int
  ): IndustryCountableConnection!
  mobile: String
  # percentage of the completed baseAccount progress.
  progress: Int
}

type SeekerNodeCountableConnection {
  # Pagination data for this connection.
  pageInfo: PageInfo!
  edges: [SeekerNodeCountableEdge!]!
  # A total count of items in the collection.
  totalCount: Int
}

type SeekerNodeCountableEdge {
  # The item at the end of the edge.
  node: SeekerNode!
  # A cursor for use in pagination.
  cursor: String!
}

enum SeekerSortField {
  # Sort users by first name.
  FIRST_NAME
  # Sort users by last name.
  LAST_NAME
  # Sort users by email.
  EMAIL
}

input SeekerSortingInput {
  # Specifies the direction in which to sort products.
  direction: OrderDirection!
  # Sort seekers by the selected field.
  field: SeekerSortField!
}

# An enumeration.
enum SeekerStatus {
  # Open for offers
  OPEN
  # Busy
  BUSY
  # Actively looking
  LOOKING
}

input SendPasswordResetEmailInput {
  clientMutationId: String
  email: String!
}

# Send password reset email.
#
# For non verified users, send an activation
# email instead.
#
# Accepts both primary and secondary email.
#
# If there is no user with the requested email,
# a successful response is returned.
type SendPasswordResetEmailPayload {
  success: Boolean
  errors: ExpectedErrorType
  clientMutationId: String
}

input SendSecondaryEmailActivationInput {
  clientMutationId: String
  email: String!
  password: String!
}

# Send activation to secondary email.
#
# User must be verified and confirm password.
type SendSecondaryEmailActivationPayload {
  success: Boolean
  errors: ExpectedErrorType
  clientMutationId: String
}

input SeoInput {
  # SEO title.
  title: String
  # SEO description.
  description: String
}

# Represents user's Skill set.
type SkillItem implements Node {
  slug: String
  uuid: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean
  isActive: Boolean
  # The ID of the object.
  id: ID!
  skill: SkillNode
  name: String!
  proficiency: SkillItemProficiency!
}

# An enumeration.
enum SkillItemProficiency {
  # Novice
  NOVICE
  # Fundamental Awareness
  FUNDAMENTAL_AWARENESS
  # Intermediate
  INTERMEDIATE
  # Advanced
  ADVANCED
  # Expert
  EXPERT
}

# Represents user's Skill set.
type SkillNode implements Node {
  slug: String
  description: JSONString
  uuid: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean
  isActive: Boolean
  descriptionPlaintext: String
  # The ID of the object.
  id: ID!
  heading: String
  resume: ResumeNode
  # Socials list of the education section
  items: [SkillItem!]
}

# Represents user's Social media handles and presence in a Resume.
type SocialItem implements Node {
  slug: String
  uuid: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean
  isActive: Boolean
  # The ID of the object.
  id: ID!
  social: SocialNode
  link: String
  network: String!
  username: String!
}

# Represents user's Social media handles and presence in a Resume.
type SocialNode implements Node {
  slug: String
  description: JSONString
  uuid: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean
  isActive: Boolean
  descriptionPlaintext: String
  # The ID of the object.
  id: ID!
  heading: String
  resume: ResumeNode
  owner: User
  # Socials list of the education section
  items: [SocialItem!]
}

type SocialNodeCountableConnection {
  # Pagination data for this connection.
  pageInfo: PageInfo!
  edges: [SocialNodeCountableEdge!]!
  # A total count of items in the collection.
  totalCount: Int
}

type SocialNodeCountableEdge {
  # The item at the end of the edge.
  node: SocialNode!
  # A cursor for use in pagination.
  cursor: String!
}

input StaffUserInput {
  status: UserStatus
  search: String
}

type Subscription {
  onTransactionMessage(transactionId: String): TransactionMessage
}

input SwapEmailsInput {
  clientMutationId: String
  password: String!
}

# Swap between primary and secondary emails.
#
# Require password confirmation.
type SwapEmailsPayload {
  success: Boolean
  errors: ExpectedErrorType
  clientMutationId: String
}

# An object representing a single payment.
type Transaction implements Node {
  # The ID of the object.
  id: ID!
  created: DateTime!
  payment: Payment!
  token: String!
  kind: TransactionKind!
  isSuccess: Boolean!
  error: TransactionError
  # Total amount of the transaction.
  amount: Money
}

# An enumeration.
enum TransactionError {
  # incorrect_number
  TRANSACTIONERROR_INCORRECT_NUMBER
  # invalid_number
  TRANSACTIONERROR_INVALID_NUMBER
  # incorrect_cvv
  TRANSACTIONERROR_INCORRECT_CVV
  # invalid_cvv
  TRANSACTIONERROR_INVALID_CVV
  # incorrect_zip
  TRANSACTIONERROR_INCORRECT_ZIP
  # incorrect_address
  TRANSACTIONERROR_INCORRECT_ADDRESS
  # invalid_expiry_date
  TRANSACTIONERROR_INVALID_EXPIRY_DATE
  # expired
  TRANSACTIONERROR_EXPIRED
  # processing_error
  TRANSACTIONERROR_PROCESSING_ERROR
  # declined
  TRANSACTIONERROR_DECLINED
}

# An enumeration.
enum TransactionKind {
  # External reference
  EXTERNAL
  # Authorization
  AUTH
  # Pending
  PENDING
  # Action to confirm
  ACTION_TO_CONFIRM
  # Refund
  REFUND
  # Refund in progress
  REFUND_ONGOING
  # Capture
  CAPTURE
  # Void
  VOID
  # Confirm
  CONFIRM
  # Cancel
  CANCEL
}

# Subscription triggers on a new transaction message.
type TransactionMessage {
  transactionId: String
  sender: ID
  payment: String
  data: JSONString
}

input UpdateAccountInput {
  clientMutationId: String
  firstName: String
  lastName: String
}

# Update user model fields, defined on settings.
#
# User must be verified.
type UpdateAccountPayload {
  success: Boolean
  errors: ExpectedErrorType
  clientMutationId: String
}

input UpdateAwardInput {
  resumePk: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  heading: String
  resume: ID
  items: [ID]
  itemsAdd: [UpdateAwardInputAddAwardItems]
  itemsRemove: [ID]
}

input UpdateAwardInputAddAwardItems {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  organization: String
  title: String
  date: Date
}

input UpdateAwardItemInput {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  award: ID
  organization: String
  title: String
  date: Date
}

type UpdateAwardItemMutation {
  awardItem: AwardItem
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type UpdateAwardMutation {
  award: AwardNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

input UpdateCertificationInput {
  resumePk: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  resume: ID
  items: [ID]
  itemsAdd: [UpdateCertificationInputAddCertificationItems]
  itemsRemove: [ID]
}

input UpdateCertificationInputAddCertificationItems {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  issuer: String
  title: String
  date: Date
}

input UpdateCertificationItemInput {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  certification: ID
  issuer: String
  title: String
  date: Date
}

type UpdateCertificationItemMutation {
  certificationItem: CertificationItem
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type UpdateCertificationMutation {
  certification: CertificationNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

input UpdateEducationInput {
  resumePk: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  resume: ID
  items: [ID]
  itemsAdd: [UpdateEducationInputAddEducationItems]
  itemsRemove: [ID]
}

input UpdateEducationInputAddEducationItems {
  level: EducationItemLevel
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  institution: String
  fieldOfStudy: String
  gpa: String
  schoolStart: Date!
  schoolEnd: Date!
}

input UpdateEducationItemInput {
  level: EducationItemLevel
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  education: ID
  institution: String
  fieldOfStudy: String
  gpa: String
  schoolStart: Date!
  schoolEnd: Date!
}

type UpdateEducationItemMutation {
  educationItem: EducationItem
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type UpdateEducationMutation {
  education: EducationNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

input UpdateEmployerInput {
  workForce: EmployerWorkForce
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  name: String
  website: String
  country: String
  location: String
  mobile: String
  regNo: Int
  lookingFor: String
  industries: [ID]
}

type UpdateEmployerMutation {
  employer: EmployerNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  employerErrors: [AccountError!]!
}

input UpdateHobbyInput {
  resumePk: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  resume: ID
  items: [ID]
  itemsAdd: [UpdateHobbyInputAddHobbyItems]
  itemsRemove: [ID]
}

input UpdateHobbyInputAddHobbyItems {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  name: String
}

input UpdateHobbyItemInput {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  hobby: ID
  name: String
}

type UpdateHobbyItemMutation {
  hobbyItem: HobbyItem
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type UpdateHobbyMutation {
  hobby: HobbyNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type UpdateInstitution {
  institution: Institution
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  vacancyErrors: [VacancyError!]!
}

input UpdateInstitutionInput {
  studentCount: InstitutionStudentCount
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  name: String
  website: String
  country: String
  location: String
  mobile: String
  regNo: String
}

type UpdateInstitutionMutation {
  institution: InstitutionNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  institutionErrors: [AccountError!]!
}

input UpdateJobInput {
  jobType: JobJobType
  minQualification: JobMinQualification
  yearsOfExp: JobYearsOfExp
  payRate: JobPayRate
  isActive: Boolean
  description: JSONString
  descriptionPlaintext: String
  seoTitle: String
  seoDescription: String
  title: String!
  industry: ID!
  currency: String
  salary: Decimal
  location: String
  jobTags: String
  closingDate: Date
  applicationEmail: String!
  positions: Int
  applicationSet: [ID]
  bookmarked: [ID]
}

input UpdateLanguageInput {
  resumePk: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  resume: ID
  items: [ID]
  itemsAdd: [UpdateLanguageInputAddLanguageItems]
  itemsRemove: [ID]
}

input UpdateLanguageInputAddLanguageItems {
  level: LanguageItemLevel
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  title: String
}

input UpdateLanguageItemInput {
  level: LanguageItemLevel
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  language: ID
  title: String
}

type UpdateLanguageItemMutation {
  languageItem: LanguageItem
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type UpdateLanguageMutation {
  language: LanguageNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

input UpdateLayoutInput {
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  metadata: ID
  name: String!
  collection: [[String]]!
}

type UpdateLayoutMutation {
  layout: LayoutNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

input UpdateProjectInput {
  resumePk: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  resume: ID
  items: [ID]
  itemsAdd: [UpdateProjectInputAddProjectItems]
  itemsRemove: [ID]
}

input UpdateProjectInputAddProjectItems {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  title: String!
  startDate: Date
  endDate: Date
  link: String
}

input UpdateProjectItemInput {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  project: ID
  title: String!
  startDate: Date
  endDate: Date
  link: String
}

type UpdateProjectItemMutation {
  projectItem: ProjectItem
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type UpdateProjectMutation {
  project: ProjectNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

input UpdateReferenceInput {
  resumePk: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  resume: ID
  items: [ID]
  itemsAdd: [UpdateReferenceInputAddReferenceItems]
  itemsRemove: [ID]
}

input UpdateReferenceInputAddReferenceItems {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  email: String!
  position: String
  fullName: String!
  mobile: String
  summary: String
}

input UpdateReferenceItemInput {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  reference: ID
  email: String!
  position: String
  fullName: String!
  mobile: String
  summary: String
}

type UpdateReferenceItemMutation {
  referenceItem: ReferenceItem
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type UpdateReferenceMutation {
  reference: ReferenceNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

input UpdateResumeInput {
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  privateMetadata: JSONString
  metadata: JSONString
  seoTitle: String
  seoDescription: String
  public: Boolean
  name: String!
  owner: ID
  objective: UpdateResumeInputCreateObjective
  education: UpdateResumeInputCreateEducation
  skill: UpdateResumeInputCreateSkill
  hobby: UpdateResumeInputCreateHobby
  work: UpdateResumeInputCreateWork
  award: UpdateResumeInputCreateAward
  certification: UpdateResumeInputCreateCertification
  language: UpdateResumeInputCreateLanguage
  resumemetadata: UpdateResumeInputCreateResumemetadata
  project: UpdateResumeInputCreateProject
  reference: UpdateResumeInputCreateReference
  social: UpdateResumeInputCreateSocial
}

input UpdateResumeInputCreateAward {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  heading: String
  items: [ID]
  itemsAdd: [CreateAwardItemInput]
  itemsUpdate: [UpdateResumeInputCreateAwardUpdateAwardItems]
  itemsRemove: [ID]
}

input UpdateResumeInputCreateAwardUpdateAwardItems {
  id: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  organization: String
  title: String
  date: Date
}

input UpdateResumeInputCreateCertification {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  items: [ID]
  itemsAdd: [CreateCertificationItemInput]
  itemsUpdate: [UpdateResumeInputCreateCertificationUpdateCertificationItems]
  itemsRemove: [ID]
}

input UpdateResumeInputCreateCertificationUpdateCertificationItems {
  id: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  issuer: String
  title: String
  date: Date
}

input UpdateResumeInputCreateEducation {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  items: [ID]
  itemsAdd: [CreateEducationItemInput]
  itemsUpdate: [UpdateResumeInputCreateEducationUpdateEducationItems]
  itemsRemove: [ID]
}

input UpdateResumeInputCreateEducationUpdateEducationItems {
  level: EducationItemLevel
  id: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  institution: String
  fieldOfStudy: String
  gpa: String
  schoolStart: Date!
  schoolEnd: Date!
}

input UpdateResumeInputCreateHobby {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  items: [ID]
  itemsAdd: [CreateHobbyItemInput]
  itemsUpdate: [UpdateResumeInputCreateHobbyUpdateHobbyItems]
  itemsRemove: [ID]
}

input UpdateResumeInputCreateHobbyUpdateHobbyItems {
  id: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  name: String
}

input UpdateResumeInputCreateLanguage {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  items: [ID]
  itemsAdd: [CreateLanguageItemInput]
  itemsUpdate: [UpdateResumeInputCreateLanguageUpdateLanguageItems]
  itemsRemove: [ID]
}

input UpdateResumeInputCreateLanguageUpdateLanguageItems {
  level: LanguageItemLevel
  id: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  title: String
}

input UpdateResumeInputCreateObjective {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
}

input UpdateResumeInputCreateProject {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  items: [ID]
  itemsAdd: [CreateProjectItemInput]
  itemsUpdate: [UpdateResumeInputCreateProjectUpdateProjectItems]
  itemsRemove: [ID]
}

input UpdateResumeInputCreateProjectUpdateProjectItems {
  id: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  title: String!
  startDate: Date
  endDate: Date
  link: String
}

input UpdateResumeInputCreateReference {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  items: [ID]
  itemsAdd: [CreateReferenceItemInput]
  itemsUpdate: [UpdateResumeInputCreateReferenceUpdateReferenceItems]
  itemsRemove: [ID]
}

input UpdateResumeInputCreateReferenceUpdateReferenceItems {
  id: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  email: String!
  position: String
  fullName: String!
  mobile: String
  summary: String
}

input UpdateResumeInputCreateResumemetadata {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  backgroundColor: String!
  primaryColor: String!
  textColor: String!
  font: String!
  fontSize: String!
  language: String
  layouts: [ID]
}

input UpdateResumeInputCreateSkill {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  items: [ID]
  itemsAdd: [CreateSkillItemInput]
  itemsUpdate: [UpdateResumeInputCreateSkillUpdateSkillItems]
  itemsRemove: [ID]
}

input UpdateResumeInputCreateSkillUpdateSkillItems {
  proficiency: SkillItemProficiency
  id: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  name: String
}

input UpdateResumeInputCreateSocial {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  owner: ID
  items: [ID]
  itemsAdd: [CreateSocialItemInput]
  itemsUpdate: [UpdateResumeInputCreateSocialUpdateSocialItems]
  itemsRemove: [ID]
}

input UpdateResumeInputCreateSocialUpdateSocialItems {
  id: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  link: String
  network: String
  username: String
}

input UpdateResumeInputCreateWork {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  items: [ID]
  itemsAdd: [CreateWorkItemInput]
  itemsUpdate: [UpdateResumeInputCreateWorkUpdateWorkItems]
  itemsRemove: [ID]
}

input UpdateResumeInputCreateWorkUpdateWorkItems {
  id: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  company: String
  position: String
  workStart: Date
  workEnd: Date
  achievements: String
  website: String
}

input UpdateResumeMetaDataInput {
  resumePk: ID!
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  resume: ID
  backgroundColor: String!
  primaryColor: String!
  textColor: String!
  font: String!
  fontSize: String!
  language: String
  layouts: [ID]
}

type UpdateResumeMetaDataMutation {
  resumeMetaData: ResumeMetaDataNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type UpdateResumeMutation {
  resume: ResumeNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

input UpdateSeekerInput {
  gender: SeekerGender
  status: SeekerStatus
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  title: String
  idNumber: Int
  dateOfBirth: Date
  location: String
  institution: String
  course: String
  address: ID
  industries: [ID]!
  mobile: String
}

type UpdateSeekerMutation {
  seeker: SeekerNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  seekerErrors: [AccountError!]!
}

input UpdateSelectableInstitutionInput {
  isActive: Boolean
  description: JSONString
  descriptionPlaintext: String
  privateMetadata: JSONString
  metadata: JSONString
  seoTitle: String
  seoDescription: String
  name: String!
  backgroundImageAlt: String!
}

input UpdateSkillInput {
  resumePk: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  resume: ID
  items: [ID]
  itemsAdd: [UpdateSkillInputAddSkillItems]
  itemsRemove: [ID]
}

input UpdateSkillInputAddSkillItems {
  proficiency: SkillItemProficiency
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  name: String
}

input UpdateSkillItemInput {
  proficiency: SkillItemProficiency
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  skill: ID
  name: String
}

type UpdateSkillItemMutation {
  skillItem: SkillItem
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type UpdateSkillMutation {
  skill: SkillNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

input UpdateSocialInput {
  resumePk: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  resume: ID
  owner: ID
  items: [ID]
  itemsAdd: [UpdateSocialInputAddSocialItems]
  itemsRemove: [ID]
}

input UpdateSocialInputAddSocialItems {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  link: String
  network: String
  username: String
}

input UpdateSocialItemInput {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  social: ID
  link: String
  network: String
  username: String
}

type UpdateSocialItemMutation {
  socialItem: SocialItem
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type UpdateSocialMutation {
  social: SocialNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type UpdateVacancyMutation {
  job: Vacancy
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  vacancyErrors: [VacancyError!]!
}

input UpdateWorkInput {
  resumePk: ID!
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  heading: String
  resume: ID
  items: [ID]
  itemsAdd: [UpdateWorkInputAddWorkItems]
  itemsRemove: [ID]
}

input UpdateWorkInputAddWorkItems {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  company: String
  position: String
  workStart: Date
  workEnd: Date
  achievements: String
  website: String
}

input UpdateWorkItemInput {
  uuid: UUID
  slug: String
  isActive: Boolean
  isDeleted: Boolean
  description: JSONString
  descriptionPlaintext: String
  work: ID
  company: String
  position: String
  workStart: Date
  workEnd: Date
  achievements: String
  website: String
}

type UpdateWorkItemMutation {
  workItem: WorkItem
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

type UpdateWorkMutation {
  work: WorkNode
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
}

# Variables of this type must be set to null in mutations. They will be replaced
# with a filename from a following multipart part containing a binary file. See:
# https://github.com/jaydenseric/graphql-multipart-request-spec.
scalar Upload

# Represents user data.
type User implements Node & ObjectWithMetadata {
  slug: String
  # The ID of the object.
  id: ID!
  lastLogin: DateTime
  # The groups this user belongs to. A user will get all permissions granted to each of their groups.
  groups(
    before: String
    after: String
    first: Int
    last: Int
  ): GroupCountableConnection!
  # List of user's permissions.
  userPermissions: [UserPermission]
  # Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  # Designates whether the user can log into this admin site.
  isStaff: Boolean!
  dateJoined: DateTime!
  createdAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean
  # List of private metadata items.Requires proper staff permissions to access.
  privateMetadata: [MetadataItem]!
  # List of public metadata items. Can be accessed without permissions.
  metadata: [MetadataItem]!
  # List of all user's addresses.
  addresses: [Address]
  fullName: String
  phone: String
  isSeeker: Boolean!
  isEmployer: Boolean!
  isInstitution: Boolean!
  defaultAddress: Address
  avatar(
    # Size of the avatar.
    size: Int
  ): Image
  seeker: SeekerNode
  employer: EmployerNode
  institution: InstitutionNode
  payments(
    before: String
    after: String
    first: Int
    last: Int
    id: ID
  ): PaymentCountableConnection!
  onlineCheckout(
    before: String
    after: String
    first: Int
    last: Int
  ): OnlineCheckoutCountableConnection!
  resumes(
    before: String
    after: String
    first: Int
    last: Int
  ): ResumeNodeCountableConnection!
  gallery: GalleryNode
  socials(
    before: String
    after: String
    first: Int
    last: Int
  ): SocialNodeCountableConnection!
  jobs(
    before: String
    after: String
    first: Int
    last: Int
  ): VacancyCountableConnection!
  # List of user's permission groups.
  permissionGroups: [Group]
  # List of user's permission groups which user can manage.
  editableGroups: [Group]
  # Number of jobs bookmarked.
  numberOfJobsBookmarked: Int
  # percentage of the completed baseAccount progress.
  progress: Int
  # JSON string of extended profile.
  extendedProfile: JSONString
  # state of subscription
  paid: Boolean
  # state of subscription
  subscriptionState: String
}

# Deletes a user avatar.
type UserAvatarDelete {
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  # An updated user instance.
  user: User
  accountErrors: [AccountError!]!
}

# Create a user avatar. This mutation must be sent as a `multipart` request. More
# detailed specs of the upload format can be found here:
# https://github.com/jaydenseric/graphql-multipart-request-spec
type UserAvatarUpdate {
  # List of errors that occurred executing the mutation.
  errors: [Error!]
    @deprecated(
      reason: "Use typed errors with error codes. This field will be removed after 2021-08-31."
    )
  success: Boolean
  # An updated user instance.
  user: User
  accountErrors: [AccountError!]!
}

type UserCountableConnection {
  # Pagination data for this connection.
  pageInfo: PageInfo!
  edges: [UserCountableEdge!]!
  # A total count of items in the collection.
  totalCount: Int
}

type UserCountableEdge {
  # The item at the end of the edge.
  node: User!
  # A cursor for use in pagination.
  cursor: String!
}

type UserNode implements Node {
  slug: String
  # The ID of the object.
  id: ID!
  lastLogin: DateTime
  # The groups this user belongs to. A user will get all permissions granted to each of their groups.
  groups(
    before: String
    after: String
    first: Int
    last: Int
  ): GroupCountableConnection!
  # Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
  username: String!
  firstName: String!
  lastName: String!
  email: String!
  # Designates whether the user can log into this admin site.
  isStaff: Boolean!
  # Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
  isActive: Boolean!
  dateJoined: DateTime!
  uuid: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean
  privateMetadata: JSONString
  metadata: JSONString
  addresses(
    before: String
    after: String
    first: Int
    last: Int
  ): AddressCountableConnection!
  fullName: String
  phone: String
  isSeeker: Boolean!
  isEmployer: Boolean!
  isInstitution: Boolean!
  defaultAddress: Address
  avatar: String
  seeker: SeekerNode
  employer: EmployerNode
  institution: InstitutionNode
  payments(
    before: String
    after: String
    first: Int
    last: Int
    id: ID
  ): PaymentCountableConnection!
  onlineCheckout(
    before: String
    after: String
    first: Int
    last: Int
  ): OnlineCheckoutCountableConnection!
  resumes(
    before: String
    after: String
    first: Int
    last: Int
  ): ResumeNodeCountableConnection!
  gallery: GalleryNode
  socials(
    before: String
    after: String
    first: Int
    last: Int
  ): SocialNodeCountableConnection!
  jobs(
    before: String
    after: String
    first: Int
    last: Int
  ): VacancyCountableConnection!
  pk: Int
  archived: Boolean
  verified: Boolean
  secondaryEmail: String
}

type UserNodeConnection {
  # Pagination data for this connection.
  pageInfo: PageInfo!
  # Contains the nodes in this connection.
  edges: [UserNodeEdge]!
}

# A Relay edge containing a `UserNode` and its cursor.
type UserNodeEdge {
  # The item at the end of the edge
  node: UserNode
  # A cursor for use in pagination
  cursor: String!
}

type UserPermission {
  # Internal code for permission.
  code: PermissionEnum!
  # Describe action(s) allowed to do by permission.
  name: String!
  # List of user permission groups which contains this permission.
  sourcePermissionGroups(
    # ID of user whose groups should be returned.
    userId: ID!
  ): [Group!]
}

enum UserSortField {
  # Sort users by first name.
  FIRST_NAME
  # Sort users by last name.
  LAST_NAME
  # Sort users by email.
  EMAIL
}

input UserSortingInput {
  # Specifies the direction in which to sort products.
  direction: OrderDirection!
  # Sort users by the selected field.
  field: UserSortField!
}

enum UserStatus {
  ACTIVE
  DEACTIVATED
}

# Leverages the internal Python implmeentation of UUID (uuid.UUID) to provide native UUID objects
# in fields, resolvers and input.
scalar UUID

# Represents vacancy.
type Vacancy implements Node & ObjectWithMetadata {
  slug: String
  description: JSONString
  createdAt: DateTime
  # The ID of the object.
  id: ID!
  title: String!
  industry: Industry!
  jobType: JobJobType!
  minQualification: JobMinQualification
  yearsOfExp: JobYearsOfExp
  payRate: JobPayRate
  salary: Float
  # Returns amount of salary.
  amount: Money!
  location: String!
  closingDate: Date!
  applicationEmail: String!
  positions: Int!
  # List of private metadata items.Requires proper staff permissions to access.
  privateMetadata: [MetadataItem]!
  # List of public metadata items. Can be accessed without permissions.
  metadata: [MetadataItem]!
  # Number of objects concerned by the event.
  count: Int
  # Description of the product (JSON).
  descriptionJson: JSONString
  # Number of active bookmarks.
  timesBookmarked: Int
  # Employer that posted the job
  postedBy: EmployerNode
}

type VacancyCountableConnection {
  # Pagination data for this connection.
  pageInfo: PageInfo!
  edges: [VacancyCountableEdge!]!
  # A total count of items in the collection.
  totalCount: Int
}

type VacancyCountableEdge {
  # The item at the end of the edge.
  node: Vacancy!
  # A cursor for use in pagination.
  cursor: String!
}

type VacancyError {
  # Name of a field that caused the error. A value of `null` indicates that the
  # error isn't associated with a particular field.
  field: String
  # The error message.
  message: String
  # The error code.
  code: VacancyErrorCode!
}

# An enumeration.
enum VacancyErrorCode {
  ALREADY_EXISTS
  GRAPHQL_ERROR
  INVALID
  NOT_FOUND
  REQUIRED
  UNIQUE
}

input VacancyFilterInput {
  search: String
  ids: [ID]
  industries: [ID]
  jobTypes: [String]
  minQualifications: [String]
  yearsOfExp: [String]
}

enum VacancySortField {
  # Sort vacancies by title.
  TITLE
  # Sort vacancies by location.
  LOCATION
  # Sort vacancies by salary.
  SALARY
  # Sort vacancies by job type.
  JOB_TYPE
  # Sort vacancies by min qualification.
  MIN_QUALIFICATION
  # Sort vacancies by years of exp.
  YEARS_OF_EXP
  # Sort vacancies by created at.
  CREATED_AT
}

input VacancySortingInput {
  # Specifies the direction in which to sort products.
  direction: OrderDirection!
  # Sort vacancies by the selected field.
  field: VacancySortField!
}

input VerifyAccountInput {
  clientMutationId: String
  token: String!
}

# Verify user account.
#
# Receive the token that was sent by email.
# If the token is valid, make the user verified
# by making the `user.status.verified` field true.
type VerifyAccountPayload {
  success: Boolean
  errors: ExpectedErrorType
  clientMutationId: String
}

input VerifySecondaryEmailInput {
  clientMutationId: String
  token: String!
}

# Verify user secondary email.
#
# Receive the token that was sent by email.
# User is already verified when using this mutation.
#
# If the token is valid, add the secondary email
# to `user.status.secondary_email` field.
#
# Note that until the secondary email is verified,
# it has not been saved anywhere beyond the token,
# so it can still be used to create a new account.
# After being verified, it will no longer be available.
type VerifySecondaryEmailPayload {
  success: Boolean
  errors: ExpectedErrorType
  clientMutationId: String
}

input VerifyTokenInput {
  token: String!
  clientMutationId: String
}

# Same as `grapgql_jwt` implementation, with standard output.
type VerifyTokenPayload {
  payload: GenericScalar
  success: Boolean
  errors: ExpectedErrorType
  clientMutationId: String
}

# Represents user's Work History.
type WorkItem implements Node {
  slug: String
  description: JSONString
  uuid: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean
  isActive: Boolean
  descriptionPlaintext: String
  # The ID of the object.
  id: ID!
  work: WorkNode
  company: String!
  position: String!
  workStart: Date
  workEnd: Date
  achievements: String!
  website: String
}

# Represents user's Work History.
type WorkNode implements Node {
  slug: String
  description: JSONString
  uuid: UUID!
  createdAt: DateTime
  updatedAt: DateTime
  isDeleted: Boolean
  isActive: Boolean
  descriptionPlaintext: String
  # The ID of the object.
  id: ID!
  heading: String
  resume: ResumeNode
  # Socials list of the education section
  items: [WorkItem!]
}

